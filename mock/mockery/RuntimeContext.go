// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockery

import (
	executor "github.com/multiversx/mx-chain-vm-go/executor"
	mock "github.com/stretchr/testify/mock"

	vmcommon "github.com/multiversx/mx-chain-vm-common-go"

	vmhost "github.com/multiversx/mx-chain-vm-go/vmhost"
)

// MockRuntimeContext is an autogenerated mock type for the RuntimeContext type
type MockRuntimeContext struct {
	mock.Mock
}

// AddError provides a mock function with given fields: err, otherInfo
func (_m *MockRuntimeContext) AddError(err error, otherInfo ...string) {
	_va := make([]interface{}, len(otherInfo))
	for _i := range otherInfo {
		_va[_i] = otherInfo[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Arguments provides a mock function with no fields
func (_m *MockRuntimeContext) Arguments() [][]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Arguments")
	}

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// CallSCFunction provides a mock function with given fields: functionName
func (_m *MockRuntimeContext) CallSCFunction(functionName string) error {
	ret := _m.Called(functionName)

	if len(ret) == 0 {
		panic("no return value specified for CallSCFunction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(functionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanInstance provides a mock function with no fields
func (_m *MockRuntimeContext) CleanInstance() {
	_m.Called()
}

// ClearStateStack provides a mock function with no fields
func (_m *MockRuntimeContext) ClearStateStack() {
	_m.Called()
}

// ClearWarmInstanceCache provides a mock function with no fields
func (_m *MockRuntimeContext) ClearWarmInstanceCache() {
	_m.Called()
}

// CountSameContractInstancesOnStack provides a mock function with given fields: address
func (_m *MockRuntimeContext) CountSameContractInstancesOnStack(address []byte) uint64 {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for CountSameContractInstancesOnStack")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func([]byte) uint64); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// EndExecution provides a mock function with no fields
func (_m *MockRuntimeContext) EndExecution() {
	_m.Called()
}

// ExtractCodeUpgradeFromArgs provides a mock function with no fields
func (_m *MockRuntimeContext) ExtractCodeUpgradeFromArgs() ([]byte, []byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExtractCodeUpgradeFromArgs")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]byte, []byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FailExecution provides a mock function with given fields: err
func (_m *MockRuntimeContext) FailExecution(err error) {
	_m.Called(err)
}

// FunctionName provides a mock function with no fields
func (_m *MockRuntimeContext) FunctionName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FunctionName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FunctionNameChecked provides a mock function with no fields
func (_m *MockRuntimeContext) FunctionNameChecked() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FunctionNameChecked")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllErrors provides a mock function with no fields
func (_m *MockRuntimeContext) GetAllErrors() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllErrors")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContextAddress provides a mock function with no fields
func (_m *MockRuntimeContext) GetContextAddress() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContextAddress")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetCurrentTxHash provides a mock function with no fields
func (_m *MockRuntimeContext) GetCurrentTxHash() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentTxHash")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetInstance provides a mock function with no fields
func (_m *MockRuntimeContext) GetInstance() executor.Instance {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 executor.Instance
	if rf, ok := ret.Get(0).(func() executor.Instance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(executor.Instance)
		}
	}

	return r0
}

// GetInstanceStackSize provides a mock function with no fields
func (_m *MockRuntimeContext) GetInstanceStackSize() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceStackSize")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetInstanceTracker provides a mock function with no fields
func (_m *MockRuntimeContext) GetInstanceTracker() vmhost.InstanceTracker {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceTracker")
	}

	var r0 vmhost.InstanceTracker
	if rf, ok := ret.Get(0).(func() vmhost.InstanceTracker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.InstanceTracker)
		}
	}

	return r0
}

// GetOriginalCallerAddress provides a mock function with no fields
func (_m *MockRuntimeContext) GetOriginalCallerAddress() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalCallerAddress")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetOriginalTxHash provides a mock function with no fields
func (_m *MockRuntimeContext) GetOriginalTxHash() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalTxHash")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetPointsUsed provides a mock function with no fields
func (_m *MockRuntimeContext) GetPointsUsed() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPointsUsed")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetPrevTxHash provides a mock function with no fields
func (_m *MockRuntimeContext) GetPrevTxHash() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrevTxHash")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetRuntimeBreakpointValue provides a mock function with no fields
func (_m *MockRuntimeContext) GetRuntimeBreakpointValue() vmhost.BreakpointValue {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRuntimeBreakpointValue")
	}

	var r0 vmhost.BreakpointValue
	if rf, ok := ret.Get(0).(func() vmhost.BreakpointValue); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(vmhost.BreakpointValue)
	}

	return r0
}

// GetSCCode provides a mock function with no fields
func (_m *MockRuntimeContext) GetSCCode() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSCCode")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSCCodeSize provides a mock function with no fields
func (_m *MockRuntimeContext) GetSCCodeSize() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSCCodeSize")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetVMExecutor provides a mock function with no fields
func (_m *MockRuntimeContext) GetVMExecutor() executor.Executor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVMExecutor")
	}

	var r0 executor.Executor
	if rf, ok := ret.Get(0).(func() executor.Executor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(executor.Executor)
		}
	}

	return r0
}

// GetVMInput provides a mock function with no fields
func (_m *MockRuntimeContext) GetVMInput() *vmcommon.ContractCallInput {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVMInput")
	}

	var r0 *vmcommon.ContractCallInput
	if rf, ok := ret.Get(0).(func() *vmcommon.ContractCallInput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmcommon.ContractCallInput)
		}
	}

	return r0
}

// GetVMType provides a mock function with no fields
func (_m *MockRuntimeContext) GetVMType() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVMType")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// HasFunction provides a mock function with given fields: functionName
func (_m *MockRuntimeContext) HasFunction(functionName string) bool {
	ret := _m.Called(functionName)

	if len(ret) == 0 {
		panic("no return value specified for HasFunction")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(functionName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// InitState provides a mock function with no fields
func (_m *MockRuntimeContext) InitState() {
	_m.Called()
}

// InitStateFromContractCallInput provides a mock function with given fields: input
func (_m *MockRuntimeContext) InitStateFromContractCallInput(input *vmcommon.ContractCallInput) {
	_m.Called(input)
}

// IsFunctionImported provides a mock function with given fields: name
func (_m *MockRuntimeContext) IsFunctionImported(name string) bool {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for IsFunctionImported")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsReservedFunctionName provides a mock function with given fields: functionName
func (_m *MockRuntimeContext) IsReservedFunctionName(functionName string) bool {
	ret := _m.Called(functionName)

	if len(ret) == 0 {
		panic("no return value specified for IsReservedFunctionName")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(functionName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MustVerifyNextContractCode provides a mock function with no fields
func (_m *MockRuntimeContext) MustVerifyNextContractCode() {
	_m.Called()
}

// PopDiscard provides a mock function with no fields
func (_m *MockRuntimeContext) PopDiscard() {
	_m.Called()
}

// PopSetActiveState provides a mock function with no fields
func (_m *MockRuntimeContext) PopSetActiveState() {
	_m.Called()
}

// PushState provides a mock function with no fields
func (_m *MockRuntimeContext) PushState() {
	_m.Called()
}

// ReadOnly provides a mock function with no fields
func (_m *MockRuntimeContext) ReadOnly() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadOnly")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReplaceVMExecutor provides a mock function with given fields: vmExecutor
func (_m *MockRuntimeContext) ReplaceVMExecutor(vmExecutor executor.Executor) {
	_m.Called(vmExecutor)
}

// SetCodeAddress provides a mock function with given fields: scAddress
func (_m *MockRuntimeContext) SetCodeAddress(scAddress []byte) {
	_m.Called(scAddress)
}

// SetCustomCallFunction provides a mock function with given fields: callFunction
func (_m *MockRuntimeContext) SetCustomCallFunction(callFunction string) {
	_m.Called(callFunction)
}

// SetMaxInstanceStackSize provides a mock function with given fields: _a0
func (_m *MockRuntimeContext) SetMaxInstanceStackSize(_a0 uint64) {
	_m.Called(_a0)
}

// SetPointsUsed provides a mock function with given fields: gasPoints
func (_m *MockRuntimeContext) SetPointsUsed(gasPoints uint64) {
	_m.Called(gasPoints)
}

// SetReadOnly provides a mock function with given fields: readOnly
func (_m *MockRuntimeContext) SetReadOnly(readOnly bool) {
	_m.Called(readOnly)
}

// SetRuntimeBreakpointValue provides a mock function with given fields: value
func (_m *MockRuntimeContext) SetRuntimeBreakpointValue(value vmhost.BreakpointValue) {
	_m.Called(value)
}

// SetVMInput provides a mock function with given fields: vmInput
func (_m *MockRuntimeContext) SetVMInput(vmInput *vmcommon.ContractCallInput) {
	_m.Called(vmInput)
}

// SignalUserError provides a mock function with given fields: message
func (_m *MockRuntimeContext) SignalUserError(message string) {
	_m.Called(message)
}

// StartWasmerInstance provides a mock function with given fields: contract, gasLimit, newCode
func (_m *MockRuntimeContext) StartWasmerInstance(contract []byte, gasLimit uint64, newCode bool) error {
	ret := _m.Called(contract, gasLimit, newCode)

	if len(ret) == 0 {
		panic("no return value specified for StartWasmerInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, uint64, bool) error); ok {
		r0 = rf(contract, gasLimit, newCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseGasBoundedShouldFailExecution provides a mock function with no fields
func (_m *MockRuntimeContext) UseGasBoundedShouldFailExecution() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseGasBoundedShouldFailExecution")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ValidateCallbackName provides a mock function with given fields: callbackName
func (_m *MockRuntimeContext) ValidateCallbackName(callbackName string) error {
	ret := _m.Called(callbackName)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCallbackName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(callbackName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateInstances provides a mock function with no fields
func (_m *MockRuntimeContext) ValidateInstances() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidateInstances")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyContractCode provides a mock function with no fields
func (_m *MockRuntimeContext) VerifyContractCode() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VerifyContractCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRuntimeContext creates a new instance of MockRuntimeContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntimeContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuntimeContext {
	mock := &MockRuntimeContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
