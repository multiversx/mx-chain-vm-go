// Code generated by mockery v2.53.4. DO NOT EDIT.

package context

import (
	big "math/big"

	vm "github.com/multiversx/mx-chain-core-go/data/vm"
	mock "github.com/stretchr/testify/mock"

	vmcommon "github.com/multiversx/mx-chain-vm-common-go"

	vmhost "github.com/multiversx/mx-chain-vm-go/vmhost"
)

// MockOutputContext is an autogenerated mock type for the OutputContext type
type MockOutputContext struct {
	mock.Mock
}

// AddToActiveState provides a mock function with given fields: rightOutput
func (_m *MockOutputContext) AddToActiveState(rightOutput *vmcommon.VMOutput) {
	_m.Called(rightOutput)
}

// AddTxValueToAccount provides a mock function with given fields: address, value
func (_m *MockOutputContext) AddTxValueToAccount(address []byte, value *big.Int) {
	_m.Called(address, value)
}

// CensorVMOutput provides a mock function with no fields
func (_m *MockOutputContext) CensorVMOutput() {
	_m.Called()
}

// ClearReturnData provides a mock function with no fields
func (_m *MockOutputContext) ClearReturnData() {
	_m.Called()
}

// ClearStateStack provides a mock function with no fields
func (_m *MockOutputContext) ClearStateStack() {
	_m.Called()
}

// CreateVMOutputInCaseOfError provides a mock function with given fields: err
func (_m *MockOutputContext) CreateVMOutputInCaseOfError(err error) *vmcommon.VMOutput {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for CreateVMOutputInCaseOfError")
	}

	var r0 *vmcommon.VMOutput
	if rf, ok := ret.Get(0).(func(error) *vmcommon.VMOutput); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmcommon.VMOutput)
		}
	}

	return r0
}

// DeleteFirstReturnData provides a mock function with no fields
func (_m *MockOutputContext) DeleteFirstReturnData() {
	_m.Called()
}

// DeleteOutputAccount provides a mock function with given fields: address
func (_m *MockOutputContext) DeleteOutputAccount(address []byte) {
	_m.Called(address)
}

// DeployCode provides a mock function with given fields: input
func (_m *MockOutputContext) DeployCode(input vmhost.CodeDeployInput) {
	_m.Called(input)
}

// Finish provides a mock function with given fields: data
func (_m *MockOutputContext) Finish(data []byte) {
	_m.Called(data)
}

// GetCrtTransferIndex provides a mock function with no fields
func (_m *MockOutputContext) GetCrtTransferIndex() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCrtTransferIndex")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// GetOutputAccount provides a mock function with given fields: address
func (_m *MockOutputContext) GetOutputAccount(address []byte) (*vmcommon.OutputAccount, bool) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetOutputAccount")
	}

	var r0 *vmcommon.OutputAccount
	var r1 bool
	if rf, ok := ret.Get(0).(func([]byte) (*vmcommon.OutputAccount, bool)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func([]byte) *vmcommon.OutputAccount); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmcommon.OutputAccount)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) bool); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetOutputAccounts provides a mock function with no fields
func (_m *MockOutputContext) GetOutputAccounts() map[string]*vmcommon.OutputAccount {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputAccounts")
	}

	var r0 map[string]*vmcommon.OutputAccount
	if rf, ok := ret.Get(0).(func() map[string]*vmcommon.OutputAccount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*vmcommon.OutputAccount)
		}
	}

	return r0
}

// GetRefund provides a mock function with no fields
func (_m *MockOutputContext) GetRefund() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRefund")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetVMOutput provides a mock function with no fields
func (_m *MockOutputContext) GetVMOutput() *vmcommon.VMOutput {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVMOutput")
	}

	var r0 *vmcommon.VMOutput
	if rf, ok := ret.Get(0).(func() *vmcommon.VMOutput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmcommon.VMOutput)
		}
	}

	return r0
}

// InitState provides a mock function with no fields
func (_m *MockOutputContext) InitState() {
	_m.Called()
}

// IsInterfaceNil provides a mock function with no fields
func (_m *MockOutputContext) IsInterfaceNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInterfaceNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NextOutputTransferIndex provides a mock function with no fields
func (_m *MockOutputContext) NextOutputTransferIndex() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextOutputTransferIndex")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// PopDiscard provides a mock function with no fields
func (_m *MockOutputContext) PopDiscard() {
	_m.Called()
}

// PopMergeActiveState provides a mock function with no fields
func (_m *MockOutputContext) PopMergeActiveState() {
	_m.Called()
}

// PopSetActiveState provides a mock function with no fields
func (_m *MockOutputContext) PopSetActiveState() {
	_m.Called()
}

// PrependFinish provides a mock function with given fields: data
func (_m *MockOutputContext) PrependFinish(data []byte) {
	_m.Called(data)
}

// PushState provides a mock function with no fields
func (_m *MockOutputContext) PushState() {
	_m.Called()
}

// RemoveNonUpdatedStorage provides a mock function with no fields
func (_m *MockOutputContext) RemoveNonUpdatedStorage() {
	_m.Called()
}

// RemoveReturnData provides a mock function with given fields: index
func (_m *MockOutputContext) RemoveReturnData(index uint32) {
	_m.Called(index)
}

// ReturnCode provides a mock function with no fields
func (_m *MockOutputContext) ReturnCode() vmcommon.ReturnCode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReturnCode")
	}

	var r0 vmcommon.ReturnCode
	if rf, ok := ret.Get(0).(func() vmcommon.ReturnCode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(vmcommon.ReturnCode)
	}

	return r0
}

// ReturnData provides a mock function with no fields
func (_m *MockOutputContext) ReturnData() [][]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReturnData")
	}

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// ReturnMessage provides a mock function with no fields
func (_m *MockOutputContext) ReturnMessage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReturnMessage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetCrtTransferIndex provides a mock function with given fields: index
func (_m *MockOutputContext) SetCrtTransferIndex(index uint32) {
	_m.Called(index)
}

// SetRefund provides a mock function with given fields: refund
func (_m *MockOutputContext) SetRefund(refund uint64) {
	_m.Called(refund)
}

// SetReturnCode provides a mock function with given fields: returnCode
func (_m *MockOutputContext) SetReturnCode(returnCode vmcommon.ReturnCode) {
	_m.Called(returnCode)
}

// SetReturnMessage provides a mock function with given fields: message
func (_m *MockOutputContext) SetReturnMessage(message string) {
	_m.Called(message)
}

// Transfer provides a mock function with given fields: destination, sender, gasLimit, gasLocked, value, asyncData, input, callType
func (_m *MockOutputContext) Transfer(destination []byte, sender []byte, gasLimit uint64, gasLocked uint64, value *big.Int, asyncData []byte, input []byte, callType vm.CallType) error {
	ret := _m.Called(destination, sender, gasLimit, gasLocked, value, asyncData, input, callType)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, uint64, uint64, *big.Int, []byte, []byte, vm.CallType) error); ok {
		r0 = rf(destination, sender, gasLimit, gasLocked, value, asyncData, input, callType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferESDT provides a mock function with given fields: transfersArgs, callInput
func (_m *MockOutputContext) TransferESDT(transfersArgs *vmhost.ESDTTransfersArgs, callInput *vmcommon.ContractCallInput) (uint64, error) {
	ret := _m.Called(transfersArgs, callInput)

	if len(ret) == 0 {
		panic("no return value specified for TransferESDT")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(*vmhost.ESDTTransfersArgs, *vmcommon.ContractCallInput) (uint64, error)); ok {
		return rf(transfersArgs, callInput)
	}
	if rf, ok := ret.Get(0).(func(*vmhost.ESDTTransfersArgs, *vmcommon.ContractCallInput) uint64); ok {
		r0 = rf(transfersArgs, callInput)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(*vmhost.ESDTTransfersArgs, *vmcommon.ContractCallInput) error); ok {
		r1 = rf(transfersArgs, callInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferValueOnly provides a mock function with given fields: destination, sender, value, checkPayable
func (_m *MockOutputContext) TransferValueOnly(destination []byte, sender []byte, value *big.Int, checkPayable bool) error {
	ret := _m.Called(destination, sender, value, checkPayable)

	if len(ret) == 0 {
		panic("no return value specified for TransferValueOnly")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, *big.Int, bool) error); ok {
		r0 = rf(destination, sender, value, checkPayable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteLog provides a mock function with given fields: address, topics, data
func (_m *MockOutputContext) WriteLog(address []byte, topics [][]byte, data [][]byte) {
	_m.Called(address, topics, data)
}

// WriteLogWithIdentifier provides a mock function with given fields: address, topics, data, identifier
func (_m *MockOutputContext) WriteLogWithIdentifier(address []byte, topics [][]byte, data [][]byte, identifier []byte) {
	_m.Called(address, topics, data, identifier)
}

// NewMockOutputContext creates a new instance of MockOutputContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOutputContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOutputContext {
	mock := &MockOutputContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
