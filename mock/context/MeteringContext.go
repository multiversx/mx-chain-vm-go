// Code generated by mockery v2.53.4. DO NOT EDIT.

package context

import (
	config "github.com/multiversx/mx-chain-vm-go/config"
	mock "github.com/stretchr/testify/mock"

	vmcommon "github.com/multiversx/mx-chain-vm-common-go"

	vmhost "github.com/multiversx/mx-chain-vm-go/vmhost"
)

// MockMeteringContext is an autogenerated mock type for the MeteringContext type
type MockMeteringContext struct {
	mock.Mock
}

// BlockGasLimit provides a mock function with no fields
func (_m *MockMeteringContext) BlockGasLimit() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockGasLimit")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// BoundGasLimit provides a mock function with given fields: value
func (_m *MockMeteringContext) BoundGasLimit(value int64) uint64 {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for BoundGasLimit")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(int64) uint64); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// ClearStateStack provides a mock function with no fields
func (_m *MockMeteringContext) ClearStateStack() {
	_m.Called()
}

// ComputeExtraGasLockedForAsync provides a mock function with no fields
func (_m *MockMeteringContext) ComputeExtraGasLockedForAsync() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ComputeExtraGasLockedForAsync")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// DeductInitialGasForDirectDeployment provides a mock function with given fields: input
func (_m *MockMeteringContext) DeductInitialGasForDirectDeployment(input vmhost.CodeDeployInput) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for DeductInitialGasForDirectDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(vmhost.CodeDeployInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeductInitialGasForExecution provides a mock function with given fields: contract
func (_m *MockMeteringContext) DeductInitialGasForExecution(contract []byte) error {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for DeductInitialGasForExecution")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(contract)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeductInitialGasForIndirectDeployment provides a mock function with given fields: input
func (_m *MockMeteringContext) DeductInitialGasForIndirectDeployment(input vmhost.CodeDeployInput) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for DeductInitialGasForIndirectDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(vmhost.CodeDeployInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableRestoreGas provides a mock function with no fields
func (_m *MockMeteringContext) DisableRestoreGas() {
	_m.Called()
}

// EnableRestoreGas provides a mock function with no fields
func (_m *MockMeteringContext) EnableRestoreGas() {
	_m.Called()
}

// FreeGas provides a mock function with given fields: gas
func (_m *MockMeteringContext) FreeGas(gas uint64) {
	_m.Called(gas)
}

// GasLeft provides a mock function with no fields
func (_m *MockMeteringContext) GasLeft() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GasLeft")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GasSchedule provides a mock function with no fields
func (_m *MockMeteringContext) GasSchedule() *config.GasCost {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GasSchedule")
	}

	var r0 *config.GasCost
	if rf, ok := ret.Get(0).(func() *config.GasCost); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.GasCost)
		}
	}

	return r0
}

// GasSpentByContract provides a mock function with no fields
func (_m *MockMeteringContext) GasSpentByContract() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GasSpentByContract")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GasUsedForExecution provides a mock function with no fields
func (_m *MockMeteringContext) GasUsedForExecution() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GasUsedForExecution")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetGasForExecution provides a mock function with no fields
func (_m *MockMeteringContext) GetGasForExecution() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasForExecution")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetGasLocked provides a mock function with no fields
func (_m *MockMeteringContext) GetGasLocked() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasLocked")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetGasProvided provides a mock function with no fields
func (_m *MockMeteringContext) GetGasProvided() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasProvided")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetGasTrace provides a mock function with no fields
func (_m *MockMeteringContext) GetGasTrace() map[string]map[string][]uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasTrace")
	}

	var r0 map[string]map[string][]uint64
	if rf, ok := ret.Get(0).(func() map[string]map[string][]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string][]uint64)
		}
	}

	return r0
}

// GetSCPrepareInitialCost provides a mock function with no fields
func (_m *MockMeteringContext) GetSCPrepareInitialCost() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSCPrepareInitialCost")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// InitState provides a mock function with no fields
func (_m *MockMeteringContext) InitState() {
	_m.Called()
}

// InitStateFromContractCallInput provides a mock function with given fields: input
func (_m *MockMeteringContext) InitStateFromContractCallInput(input *vmcommon.VMInput) {
	_m.Called(input)
}

// PopDiscard provides a mock function with no fields
func (_m *MockMeteringContext) PopDiscard() {
	_m.Called()
}

// PopMergeActiveState provides a mock function with no fields
func (_m *MockMeteringContext) PopMergeActiveState() {
	_m.Called()
}

// PopSetActiveState provides a mock function with no fields
func (_m *MockMeteringContext) PopSetActiveState() {
	_m.Called()
}

// PushState provides a mock function with no fields
func (_m *MockMeteringContext) PushState() {
	_m.Called()
}

// RestoreGas provides a mock function with given fields: gas
func (_m *MockMeteringContext) RestoreGas(gas uint64) {
	_m.Called(gas)
}

// SetGasSchedule provides a mock function with given fields: gasMap
func (_m *MockMeteringContext) SetGasSchedule(gasMap map[string]map[string]uint64) {
	_m.Called(gasMap)
}

// SetGasTracing provides a mock function with given fields: enableGasTracing
func (_m *MockMeteringContext) SetGasTracing(enableGasTracing bool) {
	_m.Called(enableGasTracing)
}

// StartGasTracing provides a mock function with given fields: functionName
func (_m *MockMeteringContext) StartGasTracing(functionName string) {
	_m.Called(functionName)
}

// TrackGasUsedByOutOfVMFunction provides a mock function with given fields: builtinInput, builtinOutput, postBuiltinInput
func (_m *MockMeteringContext) TrackGasUsedByOutOfVMFunction(builtinInput *vmcommon.ContractCallInput, builtinOutput *vmcommon.VMOutput, postBuiltinInput *vmcommon.ContractCallInput) {
	_m.Called(builtinInput, builtinOutput, postBuiltinInput)
}

// UpdateGasStateOnFailure provides a mock function with given fields: vmOutput
func (_m *MockMeteringContext) UpdateGasStateOnFailure(vmOutput *vmcommon.VMOutput) {
	_m.Called(vmOutput)
}

// UpdateGasStateOnSuccess provides a mock function with given fields: vmOutput
func (_m *MockMeteringContext) UpdateGasStateOnSuccess(vmOutput *vmcommon.VMOutput) error {
	ret := _m.Called(vmOutput)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGasStateOnSuccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*vmcommon.VMOutput) error); ok {
		r0 = rf(vmOutput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseGasBounded provides a mock function with given fields: gasToUse
func (_m *MockMeteringContext) UseGasBounded(gasToUse uint64) error {
	ret := _m.Called(gasToUse)

	if len(ret) == 0 {
		panic("no return value specified for UseGasBounded")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(gasToUse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseGasBoundedAndAddTracedGas provides a mock function with given fields: functionName, gas
func (_m *MockMeteringContext) UseGasBoundedAndAddTracedGas(functionName string, gas uint64) error {
	ret := _m.Called(functionName, gas)

	if len(ret) == 0 {
		panic("no return value specified for UseGasBoundedAndAddTracedGas")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64) error); ok {
		r0 = rf(functionName, gas)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseGasForAsyncStep provides a mock function with no fields
func (_m *MockMeteringContext) UseGasForAsyncStep() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseGasForAsyncStep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseGasForContractInit provides a mock function with given fields: gasToUse
func (_m *MockMeteringContext) UseGasForContractInit(gasToUse uint64) {
	_m.Called(gasToUse)
}

// NewMockMeteringContext creates a new instance of MockMeteringContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMeteringContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMeteringContext {
	mock := &MockMeteringContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
