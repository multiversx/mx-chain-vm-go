// Code generated by mockery v2.53.4. DO NOT EDIT.

package context

import (
	crypto "github.com/multiversx/mx-chain-vm-go/crypto"
	mock "github.com/stretchr/testify/mock"

	vm "github.com/multiversx/mx-chain-core-go/data/vm"

	vmcommon "github.com/multiversx/mx-chain-vm-common-go"

	vmhost "github.com/multiversx/mx-chain-vm-go/vmhost"
)

// MockVMHost is an autogenerated mock type for the VMHost type
type MockVMHost struct {
	mock.Mock
}

// AreInSameShard provides a mock function with given fields: leftAddress, rightAddress
func (_m *MockVMHost) AreInSameShard(leftAddress []byte, rightAddress []byte) bool {
	ret := _m.Called(leftAddress, rightAddress)

	if len(ret) == 0 {
		panic("no return value specified for AreInSameShard")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(leftAddress, rightAddress)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Async provides a mock function with no fields
func (_m *MockVMHost) Async() vmhost.AsyncContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Async")
	}

	var r0 vmhost.AsyncContext
	if rf, ok := ret.Get(0).(func() vmhost.AsyncContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.AsyncContext)
		}
	}

	return r0
}

// Blockchain provides a mock function with no fields
func (_m *MockVMHost) Blockchain() vmhost.BlockchainContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Blockchain")
	}

	var r0 vmhost.BlockchainContext
	if rf, ok := ret.Get(0).(func() vmhost.BlockchainContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.BlockchainContext)
		}
	}

	return r0
}

// Close provides a mock function with no fields
func (_m *MockVMHost) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteLogEntriesWithCallType provides a mock function with given fields: vmOutput, callType
func (_m *MockVMHost) CompleteLogEntriesWithCallType(vmOutput *vmcommon.VMOutput, callType string) {
	_m.Called(vmOutput, callType)
}

// CreateNewContract provides a mock function with given fields: input, createContractCallType
func (_m *MockVMHost) CreateNewContract(input *vmcommon.ContractCreateInput, createContractCallType int) ([]byte, error) {
	ret := _m.Called(input, createContractCallType)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewContract")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*vmcommon.ContractCreateInput, int) ([]byte, error)); ok {
		return rf(input, createContractCallType)
	}
	if rf, ok := ret.Get(0).(func(*vmcommon.ContractCreateInput, int) []byte); ok {
		r0 = rf(input, createContractCallType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*vmcommon.ContractCreateInput, int) error); ok {
		r1 = rf(input, createContractCallType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypto provides a mock function with no fields
func (_m *MockVMHost) Crypto() crypto.VMCrypto {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Crypto")
	}

	var r0 crypto.VMCrypto
	if rf, ok := ret.Get(0).(func() crypto.VMCrypto); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.VMCrypto)
		}
	}

	return r0
}

// EnableEpochsHandler provides a mock function with no fields
func (_m *MockVMHost) EnableEpochsHandler() vmhost.EnableEpochsHandler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnableEpochsHandler")
	}

	var r0 vmhost.EnableEpochsHandler
	if rf, ok := ret.Get(0).(func() vmhost.EnableEpochsHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.EnableEpochsHandler)
		}
	}

	return r0
}

// ExecuteESDTTransfer provides a mock function with given fields: transfersArgs, callType
func (_m *MockVMHost) ExecuteESDTTransfer(transfersArgs *vmhost.ESDTTransfersArgs, callType vm.CallType) (*vmcommon.VMOutput, uint64, error) {
	ret := _m.Called(transfersArgs, callType)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteESDTTransfer")
	}

	var r0 *vmcommon.VMOutput
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(*vmhost.ESDTTransfersArgs, vm.CallType) (*vmcommon.VMOutput, uint64, error)); ok {
		return rf(transfersArgs, callType)
	}
	if rf, ok := ret.Get(0).(func(*vmhost.ESDTTransfersArgs, vm.CallType) *vmcommon.VMOutput); ok {
		r0 = rf(transfersArgs, callType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmcommon.VMOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*vmhost.ESDTTransfersArgs, vm.CallType) uint64); ok {
		r1 = rf(transfersArgs, callType)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(*vmhost.ESDTTransfersArgs, vm.CallType) error); ok {
		r2 = rf(transfersArgs, callType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExecuteOnDestContext provides a mock function with given fields: input
func (_m *MockVMHost) ExecuteOnDestContext(input *vmcommon.ContractCallInput) (*vmcommon.VMOutput, bool, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteOnDestContext")
	}

	var r0 *vmcommon.VMOutput
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(*vmcommon.ContractCallInput) (*vmcommon.VMOutput, bool, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*vmcommon.ContractCallInput) *vmcommon.VMOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmcommon.VMOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*vmcommon.ContractCallInput) bool); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(*vmcommon.ContractCallInput) error); ok {
		r2 = rf(input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExecuteOnSameContext provides a mock function with given fields: input
func (_m *MockVMHost) ExecuteOnSameContext(input *vmcommon.ContractCallInput) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteOnSameContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*vmcommon.ContractCallInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GasScheduleChange provides a mock function with given fields: newGasSchedule
func (_m *MockVMHost) GasScheduleChange(newGasSchedule map[string]map[string]uint64) {
	_m.Called(newGasSchedule)
}

// GetContexts provides a mock function with no fields
func (_m *MockVMHost) GetContexts() (vmhost.ManagedTypesContext, vmhost.BlockchainContext, vmhost.MeteringContext, vmhost.OutputContext, vmhost.RuntimeContext, vmhost.AsyncContext, vmhost.StorageContext) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContexts")
	}

	var r0 vmhost.ManagedTypesContext
	var r1 vmhost.BlockchainContext
	var r2 vmhost.MeteringContext
	var r3 vmhost.OutputContext
	var r4 vmhost.RuntimeContext
	var r5 vmhost.AsyncContext
	var r6 vmhost.StorageContext
	if rf, ok := ret.Get(0).(func() (vmhost.ManagedTypesContext, vmhost.BlockchainContext, vmhost.MeteringContext, vmhost.OutputContext, vmhost.RuntimeContext, vmhost.AsyncContext, vmhost.StorageContext)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() vmhost.ManagedTypesContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.ManagedTypesContext)
		}
	}

	if rf, ok := ret.Get(1).(func() vmhost.BlockchainContext); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(vmhost.BlockchainContext)
		}
	}

	if rf, ok := ret.Get(2).(func() vmhost.MeteringContext); ok {
		r2 = rf()
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(vmhost.MeteringContext)
		}
	}

	if rf, ok := ret.Get(3).(func() vmhost.OutputContext); ok {
		r3 = rf()
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(vmhost.OutputContext)
		}
	}

	if rf, ok := ret.Get(4).(func() vmhost.RuntimeContext); ok {
		r4 = rf()
	} else {
		if ret.Get(4) != nil {
			r4 = ret.Get(4).(vmhost.RuntimeContext)
		}
	}

	if rf, ok := ret.Get(5).(func() vmhost.AsyncContext); ok {
		r5 = rf()
	} else {
		if ret.Get(5) != nil {
			r5 = ret.Get(5).(vmhost.AsyncContext)
		}
	}

	if rf, ok := ret.Get(6).(func() vmhost.StorageContext); ok {
		r6 = rf()
	} else {
		if ret.Get(6) != nil {
			r6 = ret.Get(6).(vmhost.StorageContext)
		}
	}

	return r0, r1, r2, r3, r4, r5, r6
}

// GetGasScheduleMap provides a mock function with no fields
func (_m *MockVMHost) GetGasScheduleMap() map[string]map[string]uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasScheduleMap")
	}

	var r0 map[string]map[string]uint64
	if rf, ok := ret.Get(0).(func() map[string]map[string]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]uint64)
		}
	}

	return r0
}

// GetGasTrace provides a mock function with no fields
func (_m *MockVMHost) GetGasTrace() map[string]map[string][]uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasTrace")
	}

	var r0 map[string]map[string][]uint64
	if rf, ok := ret.Get(0).(func() map[string]map[string][]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string][]uint64)
		}
	}

	return r0
}

// GetVersion provides a mock function with no fields
func (_m *MockVMHost) GetVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InitState provides a mock function with no fields
func (_m *MockVMHost) InitState() {
	_m.Called()
}

// IsAllowedToExecute provides a mock function with given fields: opcode
func (_m *MockVMHost) IsAllowedToExecute(opcode string) bool {
	ret := _m.Called(opcode)

	if len(ret) == 0 {
		panic("no return value specified for IsAllowedToExecute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(opcode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsBuiltinFunctionCall provides a mock function with given fields: data
func (_m *MockVMHost) IsBuiltinFunctionCall(data []byte) bool {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for IsBuiltinFunctionCall")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsBuiltinFunctionName provides a mock function with given fields: functionName
func (_m *MockVMHost) IsBuiltinFunctionName(functionName string) bool {
	ret := _m.Called(functionName)

	if len(ret) == 0 {
		panic("no return value specified for IsBuiltinFunctionName")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(functionName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsInterfaceNil provides a mock function with no fields
func (_m *MockVMHost) IsInterfaceNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInterfaceNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ManagedTypes provides a mock function with no fields
func (_m *MockVMHost) ManagedTypes() vmhost.ManagedTypesContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ManagedTypes")
	}

	var r0 vmhost.ManagedTypesContext
	if rf, ok := ret.Get(0).(func() vmhost.ManagedTypesContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.ManagedTypesContext)
		}
	}

	return r0
}

// Metering provides a mock function with no fields
func (_m *MockVMHost) Metering() vmhost.MeteringContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metering")
	}

	var r0 vmhost.MeteringContext
	if rf, ok := ret.Get(0).(func() vmhost.MeteringContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.MeteringContext)
		}
	}

	return r0
}

// Output provides a mock function with no fields
func (_m *MockVMHost) Output() vmhost.OutputContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 vmhost.OutputContext
	if rf, ok := ret.Get(0).(func() vmhost.OutputContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.OutputContext)
		}
	}

	return r0
}

// Reset provides a mock function with no fields
func (_m *MockVMHost) Reset() {
	_m.Called()
}

// RunSmartContractCall provides a mock function with given fields: input
func (_m *MockVMHost) RunSmartContractCall(input *vmcommon.ContractCallInput) (*vmcommon.VMOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RunSmartContractCall")
	}

	var r0 *vmcommon.VMOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*vmcommon.ContractCallInput) (*vmcommon.VMOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*vmcommon.ContractCallInput) *vmcommon.VMOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmcommon.VMOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*vmcommon.ContractCallInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunSmartContractCreate provides a mock function with given fields: input
func (_m *MockVMHost) RunSmartContractCreate(input *vmcommon.ContractCreateInput) (*vmcommon.VMOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RunSmartContractCreate")
	}

	var r0 *vmcommon.VMOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*vmcommon.ContractCreateInput) (*vmcommon.VMOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*vmcommon.ContractCreateInput) *vmcommon.VMOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmcommon.VMOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*vmcommon.ContractCreateInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Runtime provides a mock function with no fields
func (_m *MockVMHost) Runtime() vmhost.RuntimeContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Runtime")
	}

	var r0 vmhost.RuntimeContext
	if rf, ok := ret.Get(0).(func() vmhost.RuntimeContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.RuntimeContext)
		}
	}

	return r0
}

// SetBuiltInFunctionsContainer provides a mock function with given fields: builtInFuncs
func (_m *MockVMHost) SetBuiltInFunctionsContainer(builtInFuncs vmcommon.BuiltInFunctionContainer) {
	_m.Called(builtInFuncs)
}

// SetGasTracing provides a mock function with given fields: enableGasTracing
func (_m *MockVMHost) SetGasTracing(enableGasTracing bool) {
	_m.Called(enableGasTracing)
}

// SetRuntimeContext provides a mock function with given fields: runtime
func (_m *MockVMHost) SetRuntimeContext(runtime vmhost.RuntimeContext) {
	_m.Called(runtime)
}

// Storage provides a mock function with no fields
func (_m *MockVMHost) Storage() vmhost.StorageContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Storage")
	}

	var r0 vmhost.StorageContext
	if rf, ok := ret.Get(0).(func() vmhost.StorageContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmhost.StorageContext)
		}
	}

	return r0
}

// NewMockVMHost creates a new instance of MockVMHost. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVMHost(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVMHost {
	mock := &MockVMHost{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
