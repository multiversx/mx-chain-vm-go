{
    "buildInfo": {
        "rustc": {
            "version": "1.87.0",
            "commitHash": "17067e9ac6d7ecb70e50f92c1944e545188d2359",
            "commitDate": "2025-05-09",
            "channel": "Stable",
            "short": "rustc 1.87.0 (17067e9ac 2025-05-09)"
        },
        "contractCrate": {
            "name": "erc20",
            "version": "0.0.0"
        },
        "framework": {
            "name": "multiversx-sc",
            "version": "0.59.1"
        }
    },
    "abi": {
        "name": "SimpleErc20Token",
        "constructor": {
            "docs": [
                "Constructor, is called immediately after the contract is created",
                "Will set the fixed global token supply and give all the supply to the creator."
            ],
            "inputs": [
                {
                    "name": "total_supply",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        "endpoints": [
            {
                "docs": [
                    "Total number of tokens in existence."
                ],
                "name": "totalSupply",
                "mutability": "readonly",
                "inputs": [],
                "outputs": [
                    {
                        "type": "BigUint"
                    }
                ]
            },
            {
                "docs": [
                    "Gets the balance of the specified address.",
                    "",
                    "Arguments:",
                    "",
                    "* `address` The address to query the the balance of",
                    ""
                ],
                "name": "balanceOf",
                "mutability": "readonly",
                "inputs": [
                    {
                        "name": "address",
                        "type": "Address"
                    }
                ],
                "outputs": [
                    {
                        "type": "BigUint"
                    }
                ]
            },
            {
                "docs": [
                    "The amount of tokens that an owner allowed to a spender.",
                    "",
                    "Arguments:",
                    "",
                    "* `owner` The address that owns the funds.",
                    "* `spender` The address that will spend the funds.",
                    ""
                ],
                "name": "allowance",
                "mutability": "readonly",
                "inputs": [
                    {
                        "name": "owner",
                        "type": "Address"
                    },
                    {
                        "name": "spender",
                        "type": "Address"
                    }
                ],
                "outputs": [
                    {
                        "type": "BigUint"
                    }
                ]
            },
            {
                "docs": [
                    "Transfer token to a specified address from sender.",
                    "",
                    "Arguments:",
                    "",
                    "* `to` The address to transfer to.",
                    ""
                ],
                "name": "transfer",
                "mutability": "mutable",
                "inputs": [
                    {
                        "name": "to",
                        "type": "Address"
                    },
                    {
                        "name": "amount",
                        "type": "BigUint"
                    }
                ],
                "outputs": []
            },
            {
                "docs": [
                    "Use allowance to transfer funds between two accounts.",
                    "",
                    "Arguments:",
                    "",
                    "* `sender` The address to transfer from.",
                    "* `recipient` The address to transfer to.",
                    "* `amount` the amount of tokens to be transferred.",
                    ""
                ],
                "name": "transferFrom",
                "mutability": "mutable",
                "inputs": [
                    {
                        "name": "sender",
                        "type": "Address"
                    },
                    {
                        "name": "recipient",
                        "type": "Address"
                    },
                    {
                        "name": "amount",
                        "type": "BigUint"
                    }
                ],
                "outputs": []
            },
            {
                "docs": [
                    "Approve the given address to spend the specified amount of tokens on behalf of the sender.",
                    "It overwrites any previously existing allowance from sender to beneficiary.",
                    "",
                    "Arguments:",
                    "",
                    "* `spender` The address that will spend the funds.",
                    "* `amount` The amount of tokens to be spent.",
                    ""
                ],
                "name": "approve",
                "mutability": "mutable",
                "inputs": [
                    {
                        "name": "spender",
                        "type": "Address"
                    },
                    {
                        "name": "amount",
                        "type": "BigUint"
                    }
                ],
                "outputs": []
            }
        ],
        "events": [
            {
                "identifier": "transfer",
                "inputs": [
                    {
                        "name": "sender",
                        "type": "Address",
                        "indexed": true
                    },
                    {
                        "name": "recipient",
                        "type": "Address",
                        "indexed": true
                    },
                    {
                        "name": "amount",
                        "type": "BigUint"
                    }
                ]
            },
            {
                "identifier": "approve",
                "inputs": [
                    {
                        "name": "sender",
                        "type": "Address",
                        "indexed": true
                    },
                    {
                        "name": "recipient",
                        "type": "Address",
                        "indexed": true
                    },
                    {
                        "name": "amount",
                        "type": "BigUint"
                    }
                ]
            }
        ],
        "esdtAttributes": [],
        "hasCallback": false,
        "types": {}
    },
    "code": "0061736d0100000001290860027f7f017f60027f7f0060000060017f017f60017f006000017f60037f7f7f017f60037f7f7f0002f2031603656e760b7369676e616c4572726f72000103656e760d6d616e6167656443616c6c6572000403656e76126d427566666572417070656e644279746573000603656e76126d616e616765645369676e616c4572726f72000403656e76126d427566666572476574417267756d656e74000003656e76106d4275666665724765744c656e677468000303656e7619626967496e74476574556e7369676e6564417267756d656e74000103656e760f6765744e756d417267756d656e7473000503656e7614626967496e7446696e697368556e7369676e6564000403656e760f6d4275666665725365744279746573000603656e7609626967496e74416464000703656e7609626967496e74537562000703656e760a626967496e745369676e000303656e76196d42756666657246726f6d426967496e74556e7369676e6564000003656e760d6d427566666572417070656e64000003656e76136d42756666657253746f7261676553746f7265000003656e76126d42756666657253746f726167654c6f6164000003656e76176d427566666572546f426967496e74556e7369676e6564000003656e760a6d4275666665724e6577000503656e7609626967496e74436d70000003656e760f6d616e6167656457726974654c6f67000103656e760e636865636b4e6f5061796d656e740002032120040505000603040403050101010301010301000503000007020202020202020205030100030616037f01418080080b7f0041ec81080b7f0041f081080b0781010b066d656d6f7279020004696e6974002e0b746f74616c537570706c79002f0962616c616e63654f66003009616c6c6f77616e63650031087472616e7366657200320c7472616e7366657246726f6d003307617070726f766500340863616c6c4261636b00350a5f5f646174615f656e6403010b5f5f686561705f6261736503020c01020af106200900200041121000000b0c01017f10182200100120000b1901017f41e8810841e8810828020041016b220036020020000b1101017f101822022000200110091a20020b430020001018220010041a200010054120470440418080084117101922002001200210021a200041978008410310021a200041e38008411010021a20001003000b20000b0c00200010182200100620000b1400100720004604400f0b419a800841191000000b08002000101e10080b160020001018220010101a20001018220010111a20000b08004101410010190b4601017f230041106b220224002002200141187420014180fe03714108747220014108764180fe03712001411876727236020c20002002410c6a410410021a200241106a24000b0a00200020002001100a0b1d00200020002001100b2000100c410048044041b3800841301000000b0b0f01017f101822012000100d1a20010b090020002001100e1a0b0b00200020011023100f1a0b0900101f1a200010230b1601017f101f1a101222022001100e1a2000200210200b1201017f101f2202200020011019102020020b0a0041f38008410b10190b1401017f418581084107101922012000102420010b1a01017f419481084109101922022000102420022001102420020b0b0020002001101341004c0b5901027f20022000102a2204101e2203102c45044041d381081016000b2003200210222004200310252001102a2203101e220420021021200320041025418c81084108102822032000102720032001102720032002102610140b2a01037f10154101101c4100101b21011017102920011025102a2200101e2202200110212000200210250b0c0010154100101c1029101d0b160010154101101c410041ab81084107101a102a101d0b200010154102101c410041a681084105101a4101419d81084107101a102b101d0b2401027f10154102101c410041a481084102101a21004101101b2101101720002001102d0b5501057f10154103101c410041bb81084106101a2100410141b281084109101a21034102101b220120001017102b2204101e2202102c45044041c181081016000b200220011022200420021025200020032001102d0b4401047f10154102101c4100419d81084107101a21004101101b2101101722032000102b2001102541fe80084107102822022003102720022000102720022001102610140b02000b0bf9010200418080080be501617267756d656e74206465636f6465206572726f722028293a2077726f6e67206e756d626572206f6620617267756d656e747363616e6e6f74207375627472616374206265636175736520726573756c7420776f756c64206265206e65676174697665626164206172726179206c656e677468746f74616c537570706c79617070726f766562616c616e63657472616e73666572616c6c6f77616e63657370656e646572746f6f776e657261646472657373726563697069656e7473656e646572616c6c6f77616e6365206578636565646564696e73756666696369656e742066756e64730041e881080b0438ffffff",
    "report": {
        "imports": [
            "bigIntAdd",
            "bigIntCmp",
            "bigIntFinishUnsigned",
            "bigIntGetUnsignedArgument",
            "bigIntSign",
            "bigIntSub",
            "checkNoPayment",
            "getNumArguments",
            "mBufferAppend",
            "mBufferAppendBytes",
            "mBufferFromBigIntUnsigned",
            "mBufferGetArgument",
            "mBufferGetLength",
            "mBufferNew",
            "mBufferSetBytes",
            "mBufferStorageLoad",
            "mBufferStorageStore",
            "mBufferToBigIntUnsigned",
            "managedCaller",
            "managedSignalError",
            "managedWriteLog",
            "signalError"
        ],
        "isMemGrow": false,
        "eiCheck": {
            "eiVersion": "1.5",
            "ok": true
        },
        "codeReport": {
            "path": "../output/erc20.wasm",
            "size": 1887,
            "hasAllocator": false,
            "hasPanic": "None"
        }
    }
}
