package wasmer2

// Code generated by vmhooks generator. DO NOT EDIT.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!! AUTO-GENERATED FILE !!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// // Declare the function signatures (see [cgo](https://golang.org/cmd/cgo/)).
//
// #include <stdlib.h>
// typedef int int32_t;
//
// extern long long w2_getGasLeft(void* context);
// extern void      w2_getSCAddress(void* context, int32_t resultOffset);
// extern void      w2_getOwnerAddress(void* context, int32_t resultOffset);
// extern int32_t   w2_getShardOfAddress(void* context, int32_t addressOffset);
// extern int32_t   w2_isSmartContract(void* context, int32_t addressOffset);
// extern void      w2_signalError(void* context, int32_t messageOffset, int32_t messageLength);
// extern void      w2_getExternalBalance(void* context, int32_t addressOffset, int32_t resultOffset);
// extern int32_t   w2_getBlockHash(void* context, long long nonce, int32_t resultOffset);
// extern int32_t   w2_getESDTBalance(void* context, int32_t addressOffset, int32_t tokenIDOffset, int32_t tokenIDLen, long long nonce, int32_t resultOffset);
// extern int32_t   w2_getESDTNFTNameLength(void* context, int32_t addressOffset, int32_t tokenIDOffset, int32_t tokenIDLen, long long nonce);
// extern int32_t   w2_getESDTNFTAttributeLength(void* context, int32_t addressOffset, int32_t tokenIDOffset, int32_t tokenIDLen, long long nonce);
// extern int32_t   w2_getESDTNFTURILength(void* context, int32_t addressOffset, int32_t tokenIDOffset, int32_t tokenIDLen, long long nonce);
// extern int32_t   w2_getESDTTokenData(void* context, int32_t addressOffset, int32_t tokenIDOffset, int32_t tokenIDLen, long long nonce, int32_t valueHandle, int32_t propertiesOffset, int32_t hashOffset, int32_t nameOffset, int32_t attributesOffset, int32_t creatorOffset, int32_t royaltiesHandle, int32_t urisOffset);
// extern long long w2_getESDTLocalRoles(void* context, int32_t tokenIdHandle);
// extern int32_t   w2_validateTokenIdentifier(void* context, int32_t tokenIdHandle);
// extern int32_t   w2_transferValue(void* context, int32_t destOffset, int32_t valueOffset, int32_t dataOffset, int32_t length);
// extern int32_t   w2_transferValueExecute(void* context, int32_t destOffset, int32_t valueOffset, long long gasLimit, int32_t functionOffset, int32_t functionLength, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern int32_t   w2_transferESDTExecute(void* context, int32_t destOffset, int32_t tokenIDOffset, int32_t tokenIDLen, int32_t valueOffset, long long gasLimit, int32_t functionOffset, int32_t functionLength, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern int32_t   w2_transferESDTNFTExecute(void* context, int32_t destOffset, int32_t tokenIDOffset, int32_t tokenIDLen, int32_t valueOffset, long long nonce, long long gasLimit, int32_t functionOffset, int32_t functionLength, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern int32_t   w2_multiTransferESDTNFTExecute(void* context, int32_t destOffset, int32_t numTokenTransfers, int32_t tokenTransfersArgsLengthOffset, int32_t tokenTransferDataOffset, long long gasLimit, int32_t functionOffset, int32_t functionLength, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern int32_t   w2_createAsyncCall(void* context, int32_t destOffset, int32_t valueOffset, int32_t dataOffset, int32_t dataLength, int32_t successOffset, int32_t successLength, int32_t errorOffset, int32_t errorLength, long long gas, long long extraGasForCallback);
// extern int32_t   w2_setAsyncContextCallback(void* context, int32_t callback, int32_t callbackLength, int32_t data, int32_t dataLength, long long gas);
// extern void      w2_upgradeContract(void* context, int32_t destOffset, long long gasLimit, int32_t valueOffset, int32_t codeOffset, int32_t codeMetadataOffset, int32_t length, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern void      w2_upgradeFromSourceContract(void* context, int32_t destOffset, long long gasLimit, int32_t valueOffset, int32_t sourceContractAddressOffset, int32_t codeMetadataOffset, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern void      w2_deleteContract(void* context, int32_t destOffset, long long gasLimit, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern void      w2_asyncCall(void* context, int32_t destOffset, int32_t valueOffset, int32_t dataOffset, int32_t length);
// extern int32_t   w2_getArgumentLength(void* context, int32_t id);
// extern int32_t   w2_getArgument(void* context, int32_t id, int32_t argOffset);
// extern int32_t   w2_getFunction(void* context, int32_t functionOffset);
// extern int32_t   w2_getNumArguments(void* context);
// extern int32_t   w2_storageStore(void* context, int32_t keyOffset, int32_t keyLength, int32_t dataOffset, int32_t dataLength);
// extern int32_t   w2_storageLoadLength(void* context, int32_t keyOffset, int32_t keyLength);
// extern int32_t   w2_storageLoadFromAddress(void* context, int32_t addressOffset, int32_t keyOffset, int32_t keyLength, int32_t dataOffset);
// extern int32_t   w2_storageLoad(void* context, int32_t keyOffset, int32_t keyLength, int32_t dataOffset);
// extern int32_t   w2_setStorageLock(void* context, int32_t keyOffset, int32_t keyLength, long long lockTimestamp);
// extern long long w2_getStorageLock(void* context, int32_t keyOffset, int32_t keyLength);
// extern int32_t   w2_isStorageLocked(void* context, int32_t keyOffset, int32_t keyLength);
// extern int32_t   w2_clearStorageLock(void* context, int32_t keyOffset, int32_t keyLength);
// extern void      w2_getCaller(void* context, int32_t resultOffset);
// extern void      w2_checkNoPayment(void* context);
// extern int32_t   w2_getCallValue(void* context, int32_t resultOffset);
// extern int32_t   w2_getESDTValue(void* context, int32_t resultOffset);
// extern int32_t   w2_getESDTValueByIndex(void* context, int32_t resultOffset, int32_t index);
// extern int32_t   w2_getESDTTokenName(void* context, int32_t resultOffset);
// extern int32_t   w2_getESDTTokenNameByIndex(void* context, int32_t resultOffset, int32_t index);
// extern long long w2_getESDTTokenNonce(void* context);
// extern long long w2_getESDTTokenNonceByIndex(void* context, int32_t index);
// extern long long w2_getCurrentESDTNFTNonce(void* context, int32_t addressOffset, int32_t tokenIDOffset, int32_t tokenIDLen);
// extern int32_t   w2_getESDTTokenType(void* context);
// extern int32_t   w2_getESDTTokenTypeByIndex(void* context, int32_t index);
// extern int32_t   w2_getNumESDTTransfers(void* context);
// extern int32_t   w2_getCallValueTokenName(void* context, int32_t callValueOffset, int32_t tokenNameOffset);
// extern int32_t   w2_getCallValueTokenNameByIndex(void* context, int32_t callValueOffset, int32_t tokenNameOffset, int32_t index);
// extern int32_t   w2_isReservedFunctionName(void* context, int32_t nameHandle);
// extern void      w2_writeLog(void* context, int32_t dataPointer, int32_t dataLength, int32_t topicPtr, int32_t numTopics);
// extern void      w2_writeEventLog(void* context, int32_t numTopics, int32_t topicLengthsOffset, int32_t topicOffset, int32_t dataOffset, int32_t dataLength);
// extern long long w2_getBlockTimestamp(void* context);
// extern long long w2_getBlockNonce(void* context);
// extern long long w2_getBlockRound(void* context);
// extern long long w2_getBlockEpoch(void* context);
// extern void      w2_getBlockRandomSeed(void* context, int32_t pointer);
// extern void      w2_getStateRootHash(void* context, int32_t pointer);
// extern long long w2_getPrevBlockTimestamp(void* context);
// extern long long w2_getPrevBlockNonce(void* context);
// extern long long w2_getPrevBlockRound(void* context);
// extern long long w2_getPrevBlockEpoch(void* context);
// extern void      w2_getPrevBlockRandomSeed(void* context, int32_t pointer);
// extern void      w2_finish(void* context, int32_t pointer, int32_t length);
// extern int32_t   w2_executeOnSameContext(void* context, long long gasLimit, int32_t addressOffset, int32_t valueOffset, int32_t functionOffset, int32_t functionLength, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern int32_t   w2_executeOnDestContext(void* context, long long gasLimit, int32_t addressOffset, int32_t valueOffset, int32_t functionOffset, int32_t functionLength, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern int32_t   w2_executeReadOnly(void* context, long long gasLimit, int32_t addressOffset, int32_t functionOffset, int32_t functionLength, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern int32_t   w2_createContract(void* context, long long gasLimit, int32_t valueOffset, int32_t codeOffset, int32_t codeMetadataOffset, int32_t length, int32_t resultOffset, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern int32_t   w2_deployFromSourceContract(void* context, long long gasLimit, int32_t valueOffset, int32_t sourceContractAddressOffset, int32_t codeMetadataOffset, int32_t resultAddressOffset, int32_t numArguments, int32_t argumentsLengthOffset, int32_t dataOffset);
// extern int32_t   w2_getNumReturnData(void* context);
// extern int32_t   w2_getReturnDataSize(void* context, int32_t resultID);
// extern int32_t   w2_getReturnData(void* context, int32_t resultID, int32_t dataOffset);
// extern void      w2_cleanReturnData(void* context);
// extern void      w2_deleteFromReturnData(void* context, int32_t resultID);
// extern void      w2_getOriginalTxHash(void* context, int32_t dataOffset);
// extern void      w2_getCurrentTxHash(void* context, int32_t dataOffset);
// extern void      w2_getPrevTxHash(void* context, int32_t dataOffset);
// extern void      w2_managedSCAddress(void* context, int32_t destinationHandle);
// extern void      w2_managedOwnerAddress(void* context, int32_t destinationHandle);
// extern void      w2_managedCaller(void* context, int32_t destinationHandle);
// extern void      w2_managedGetOriginalCallerAddr(void* context, int32_t destinationHandle);
// extern void      w2_managedGetRelayerAddr(void* context, int32_t destinationHandle);
// extern void      w2_managedSignalError(void* context, int32_t errHandle);
// extern void      w2_managedWriteLog(void* context, int32_t topicsHandle, int32_t dataHandle);
// extern void      w2_managedGetOriginalTxHash(void* context, int32_t resultHandle);
// extern void      w2_managedGetStateRootHash(void* context, int32_t resultHandle);
// extern void      w2_managedGetBlockRandomSeed(void* context, int32_t resultHandle);
// extern void      w2_managedGetPrevBlockRandomSeed(void* context, int32_t resultHandle);
// extern void      w2_managedGetReturnData(void* context, int32_t resultID, int32_t resultHandle);
// extern void      w2_managedGetMultiESDTCallValue(void* context, int32_t multiCallValueHandle);
// extern void      w2_managedGetBackTransfers(void* context, int32_t esdtTransfersValueHandle, int32_t egldValueHandle);
// extern void      w2_managedGetESDTBalance(void* context, int32_t addressHandle, int32_t tokenIDHandle, long long nonce, int32_t valueHandle);
// extern void      w2_managedGetESDTTokenData(void* context, int32_t addressHandle, int32_t tokenIDHandle, long long nonce, int32_t valueHandle, int32_t propertiesHandle, int32_t hashHandle, int32_t nameHandle, int32_t attributesHandle, int32_t creatorHandle, int32_t royaltiesHandle, int32_t urisHandle);
// extern void      w2_managedAsyncCall(void* context, int32_t destHandle, int32_t valueHandle, int32_t functionHandle, int32_t argumentsHandle);
// extern int32_t   w2_managedCreateAsyncCall(void* context, int32_t destHandle, int32_t valueHandle, int32_t functionHandle, int32_t argumentsHandle, int32_t successOffset, int32_t successLength, int32_t errorOffset, int32_t errorLength, long long gas, long long extraGasForCallback, int32_t callbackClosureHandle);
// extern void      w2_managedGetCallbackClosure(void* context, int32_t callbackClosureHandle);
// extern void      w2_managedUpgradeFromSourceContract(void* context, int32_t destHandle, long long gas, int32_t valueHandle, int32_t addressHandle, int32_t codeMetadataHandle, int32_t argumentsHandle, int32_t resultHandle);
// extern void      w2_managedUpgradeContract(void* context, int32_t destHandle, long long gas, int32_t valueHandle, int32_t codeHandle, int32_t codeMetadataHandle, int32_t argumentsHandle, int32_t resultHandle);
// extern void      w2_managedDeleteContract(void* context, int32_t destHandle, long long gasLimit, int32_t argumentsHandle);
// extern int32_t   w2_managedDeployFromSourceContract(void* context, long long gas, int32_t valueHandle, int32_t addressHandle, int32_t codeMetadataHandle, int32_t argumentsHandle, int32_t resultAddressHandle, int32_t resultHandle);
// extern int32_t   w2_managedCreateContract(void* context, long long gas, int32_t valueHandle, int32_t codeHandle, int32_t codeMetadataHandle, int32_t argumentsHandle, int32_t resultAddressHandle, int32_t resultHandle);
// extern int32_t   w2_managedExecuteReadOnly(void* context, long long gas, int32_t addressHandle, int32_t functionHandle, int32_t argumentsHandle, int32_t resultHandle);
// extern int32_t   w2_managedExecuteOnSameContext(void* context, long long gas, int32_t addressHandle, int32_t valueHandle, int32_t functionHandle, int32_t argumentsHandle, int32_t resultHandle);
// extern int32_t   w2_managedExecuteOnDestContext(void* context, long long gas, int32_t addressHandle, int32_t valueHandle, int32_t functionHandle, int32_t argumentsHandle, int32_t resultHandle);
// extern int32_t   w2_managedMultiTransferESDTNFTExecute(void* context, int32_t dstHandle, int32_t tokenTransfersHandle, long long gasLimit, int32_t functionHandle, int32_t argumentsHandle);
// extern int32_t   w2_managedMultiTransferESDTNFTExecuteByUser(void* context, int32_t userHandle, int32_t dstHandle, int32_t tokenTransfersHandle, long long gasLimit, int32_t functionHandle, int32_t argumentsHandle);
// extern int32_t   w2_managedTransferValueExecute(void* context, int32_t dstHandle, int32_t valueHandle, long long gasLimit, int32_t functionHandle, int32_t argumentsHandle);
// extern int32_t   w2_managedIsESDTFrozen(void* context, int32_t addressHandle, int32_t tokenIDHandle, long long nonce);
// extern int32_t   w2_managedIsESDTLimitedTransfer(void* context, int32_t tokenIDHandle);
// extern int32_t   w2_managedIsESDTPaused(void* context, int32_t tokenIDHandle);
// extern void      w2_managedBufferToHex(void* context, int32_t sourceHandle, int32_t destHandle);
// extern void      w2_managedGetCodeMetadata(void* context, int32_t addressHandle, int32_t responseHandle);
// extern int32_t   w2_managedIsBuiltinFunction(void* context, int32_t functionNameHandle);
// extern int32_t   w2_bigFloatNewFromParts(void* context, int32_t integralPart, int32_t fractionalPart, int32_t exponent);
// extern int32_t   w2_bigFloatNewFromFrac(void* context, long long numerator, long long denominator);
// extern int32_t   w2_bigFloatNewFromSci(void* context, long long significand, long long exponent);
// extern void      w2_bigFloatAdd(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigFloatSub(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigFloatMul(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigFloatDiv(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigFloatNeg(void* context, int32_t destinationHandle, int32_t opHandle);
// extern void      w2_bigFloatClone(void* context, int32_t destinationHandle, int32_t opHandle);
// extern int32_t   w2_bigFloatCmp(void* context, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigFloatAbs(void* context, int32_t destinationHandle, int32_t opHandle);
// extern int32_t   w2_bigFloatSign(void* context, int32_t opHandle);
// extern void      w2_bigFloatSqrt(void* context, int32_t destinationHandle, int32_t opHandle);
// extern void      w2_bigFloatPow(void* context, int32_t destinationHandle, int32_t opHandle, int32_t exponent);
// extern void      w2_bigFloatFloor(void* context, int32_t destBigIntHandle, int32_t opHandle);
// extern void      w2_bigFloatCeil(void* context, int32_t destBigIntHandle, int32_t opHandle);
// extern void      w2_bigFloatTruncate(void* context, int32_t destBigIntHandle, int32_t opHandle);
// extern void      w2_bigFloatSetInt64(void* context, int32_t destinationHandle, long long value);
// extern int32_t   w2_bigFloatIsInt(void* context, int32_t opHandle);
// extern void      w2_bigFloatSetBigInt(void* context, int32_t destinationHandle, int32_t bigIntHandle);
// extern void      w2_bigFloatGetConstPi(void* context, int32_t destinationHandle);
// extern void      w2_bigFloatGetConstE(void* context, int32_t destinationHandle);
// extern void      w2_bigIntGetUnsignedArgument(void* context, int32_t id, int32_t destinationHandle);
// extern void      w2_bigIntGetSignedArgument(void* context, int32_t id, int32_t destinationHandle);
// extern int32_t   w2_bigIntStorageStoreUnsigned(void* context, int32_t keyOffset, int32_t keyLength, int32_t sourceHandle);
// extern int32_t   w2_bigIntStorageLoadUnsigned(void* context, int32_t keyOffset, int32_t keyLength, int32_t destinationHandle);
// extern void      w2_bigIntGetCallValue(void* context, int32_t destinationHandle);
// extern void      w2_bigIntGetESDTCallValue(void* context, int32_t destination);
// extern void      w2_bigIntGetESDTCallValueByIndex(void* context, int32_t destinationHandle, int32_t index);
// extern void      w2_bigIntGetExternalBalance(void* context, int32_t addressOffset, int32_t result);
// extern void      w2_bigIntGetESDTExternalBalance(void* context, int32_t addressOffset, int32_t tokenIDOffset, int32_t tokenIDLen, long long nonce, int32_t resultHandle);
// extern int32_t   w2_bigIntNew(void* context, long long smallValue);
// extern int32_t   w2_bigIntUnsignedByteLength(void* context, int32_t referenceHandle);
// extern int32_t   w2_bigIntSignedByteLength(void* context, int32_t referenceHandle);
// extern int32_t   w2_bigIntGetUnsignedBytes(void* context, int32_t referenceHandle, int32_t byteOffset);
// extern int32_t   w2_bigIntGetSignedBytes(void* context, int32_t referenceHandle, int32_t byteOffset);
// extern void      w2_bigIntSetUnsignedBytes(void* context, int32_t destinationHandle, int32_t byteOffset, int32_t byteLength);
// extern void      w2_bigIntSetSignedBytes(void* context, int32_t destinationHandle, int32_t byteOffset, int32_t byteLength);
// extern int32_t   w2_bigIntIsInt64(void* context, int32_t destinationHandle);
// extern long long w2_bigIntGetInt64(void* context, int32_t destinationHandle);
// extern void      w2_bigIntSetInt64(void* context, int32_t destinationHandle, long long value);
// extern void      w2_bigIntAdd(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntSub(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntMul(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntTDiv(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntTMod(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntEDiv(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntEMod(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntSqrt(void* context, int32_t destinationHandle, int32_t opHandle);
// extern void      w2_bigIntPow(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern int32_t   w2_bigIntLog2(void* context, int32_t op1Handle);
// extern void      w2_bigIntAbs(void* context, int32_t destinationHandle, int32_t opHandle);
// extern void      w2_bigIntNeg(void* context, int32_t destinationHandle, int32_t opHandle);
// extern int32_t   w2_bigIntSign(void* context, int32_t opHandle);
// extern int32_t   w2_bigIntCmp(void* context, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntNot(void* context, int32_t destinationHandle, int32_t opHandle);
// extern void      w2_bigIntAnd(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntOr(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntXor(void* context, int32_t destinationHandle, int32_t op1Handle, int32_t op2Handle);
// extern void      w2_bigIntShr(void* context, int32_t destinationHandle, int32_t opHandle, int32_t bits);
// extern void      w2_bigIntShl(void* context, int32_t destinationHandle, int32_t opHandle, int32_t bits);
// extern void      w2_bigIntFinishUnsigned(void* context, int32_t referenceHandle);
// extern void      w2_bigIntFinishSigned(void* context, int32_t referenceHandle);
// extern void      w2_bigIntToString(void* context, int32_t bigIntHandle, int32_t destinationHandle);
// extern int32_t   w2_mBufferNew(void* context);
// extern int32_t   w2_mBufferNewFromBytes(void* context, int32_t dataOffset, int32_t dataLength);
// extern int32_t   w2_mBufferGetLength(void* context, int32_t mBufferHandle);
// extern int32_t   w2_mBufferGetBytes(void* context, int32_t mBufferHandle, int32_t resultOffset);
// extern int32_t   w2_mBufferGetByteSlice(void* context, int32_t sourceHandle, int32_t startingPosition, int32_t sliceLength, int32_t resultOffset);
// extern int32_t   w2_mBufferCopyByteSlice(void* context, int32_t sourceHandle, int32_t startingPosition, int32_t sliceLength, int32_t destinationHandle);
// extern int32_t   w2_mBufferEq(void* context, int32_t mBufferHandle1, int32_t mBufferHandle2);
// extern int32_t   w2_mBufferSetBytes(void* context, int32_t mBufferHandle, int32_t dataOffset, int32_t dataLength);
// extern int32_t   w2_mBufferSetByteSlice(void* context, int32_t mBufferHandle, int32_t startingPosition, int32_t dataLength, int32_t dataOffset);
// extern int32_t   w2_mBufferAppend(void* context, int32_t accumulatorHandle, int32_t dataHandle);
// extern int32_t   w2_mBufferAppendBytes(void* context, int32_t accumulatorHandle, int32_t dataOffset, int32_t dataLength);
// extern int32_t   w2_mBufferToBigIntUnsigned(void* context, int32_t mBufferHandle, int32_t bigIntHandle);
// extern int32_t   w2_mBufferToBigIntSigned(void* context, int32_t mBufferHandle, int32_t bigIntHandle);
// extern int32_t   w2_mBufferFromBigIntUnsigned(void* context, int32_t mBufferHandle, int32_t bigIntHandle);
// extern int32_t   w2_mBufferFromBigIntSigned(void* context, int32_t mBufferHandle, int32_t bigIntHandle);
// extern int32_t   w2_mBufferToBigFloat(void* context, int32_t mBufferHandle, int32_t bigFloatHandle);
// extern int32_t   w2_mBufferFromBigFloat(void* context, int32_t mBufferHandle, int32_t bigFloatHandle);
// extern int32_t   w2_mBufferStorageStore(void* context, int32_t keyHandle, int32_t sourceHandle);
// extern int32_t   w2_mBufferStorageLoad(void* context, int32_t keyHandle, int32_t destinationHandle);
// extern void      w2_mBufferStorageLoadFromAddress(void* context, int32_t addressHandle, int32_t keyHandle, int32_t destinationHandle);
// extern int32_t   w2_mBufferGetArgument(void* context, int32_t id, int32_t destinationHandle);
// extern int32_t   w2_mBufferFinish(void* context, int32_t sourceHandle);
// extern int32_t   w2_mBufferSetRandom(void* context, int32_t destinationHandle, int32_t length);
// extern int32_t   w2_managedMapNew(void* context);
// extern int32_t   w2_managedMapPut(void* context, int32_t mMapHandle, int32_t keyHandle, int32_t valueHandle);
// extern int32_t   w2_managedMapGet(void* context, int32_t mMapHandle, int32_t keyHandle, int32_t outValueHandle);
// extern int32_t   w2_managedMapRemove(void* context, int32_t mMapHandle, int32_t keyHandle, int32_t outValueHandle);
// extern int32_t   w2_managedMapContains(void* context, int32_t mMapHandle, int32_t keyHandle);
// extern long long w2_smallIntGetUnsignedArgument(void* context, int32_t id);
// extern long long w2_smallIntGetSignedArgument(void* context, int32_t id);
// extern void      w2_smallIntFinishUnsigned(void* context, long long value);
// extern void      w2_smallIntFinishSigned(void* context, long long value);
// extern int32_t   w2_smallIntStorageStoreUnsigned(void* context, int32_t keyOffset, int32_t keyLength, long long value);
// extern int32_t   w2_smallIntStorageStoreSigned(void* context, int32_t keyOffset, int32_t keyLength, long long value);
// extern long long w2_smallIntStorageLoadUnsigned(void* context, int32_t keyOffset, int32_t keyLength);
// extern long long w2_smallIntStorageLoadSigned(void* context, int32_t keyOffset, int32_t keyLength);
// extern long long w2_int64getArgument(void* context, int32_t id);
// extern void      w2_int64finish(void* context, long long value);
// extern int32_t   w2_int64storageStore(void* context, int32_t keyOffset, int32_t keyLength, long long value);
// extern long long w2_int64storageLoad(void* context, int32_t keyOffset, int32_t keyLength);
// extern int32_t   w2_sha256(void* context, int32_t dataOffset, int32_t length, int32_t resultOffset);
// extern int32_t   w2_managedSha256(void* context, int32_t inputHandle, int32_t outputHandle);
// extern int32_t   w2_keccak256(void* context, int32_t dataOffset, int32_t length, int32_t resultOffset);
// extern int32_t   w2_managedKeccak256(void* context, int32_t inputHandle, int32_t outputHandle);
// extern int32_t   w2_ripemd160(void* context, int32_t dataOffset, int32_t length, int32_t resultOffset);
// extern int32_t   w2_managedRipemd160(void* context, int32_t inputHandle, int32_t outputHandle);
// extern int32_t   w2_verifyBLS(void* context, int32_t keyOffset, int32_t messageOffset, int32_t messageLength, int32_t sigOffset);
// extern int32_t   w2_managedVerifyBLS(void* context, int32_t keyHandle, int32_t messageHandle, int32_t sigHandle);
// extern int32_t   w2_verifyEd25519(void* context, int32_t keyOffset, int32_t messageOffset, int32_t messageLength, int32_t sigOffset);
// extern int32_t   w2_managedVerifyEd25519(void* context, int32_t keyHandle, int32_t messageHandle, int32_t sigHandle);
// extern int32_t   w2_verifyCustomSecp256k1(void* context, int32_t keyOffset, int32_t keyLength, int32_t messageOffset, int32_t messageLength, int32_t sigOffset, int32_t hashType);
// extern int32_t   w2_managedVerifyCustomSecp256k1(void* context, int32_t keyHandle, int32_t messageHandle, int32_t sigHandle, int32_t hashType);
// extern int32_t   w2_verifySecp256k1(void* context, int32_t keyOffset, int32_t keyLength, int32_t messageOffset, int32_t messageLength, int32_t sigOffset);
// extern int32_t   w2_managedVerifySecp256k1(void* context, int32_t keyHandle, int32_t messageHandle, int32_t sigHandle);
// extern int32_t   w2_encodeSecp256k1DerSignature(void* context, int32_t rOffset, int32_t rLength, int32_t sOffset, int32_t sLength, int32_t sigOffset);
// extern int32_t   w2_managedEncodeSecp256k1DerSignature(void* context, int32_t rHandle, int32_t sHandle, int32_t sigHandle);
// extern void      w2_addEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t fstPointXHandle, int32_t fstPointYHandle, int32_t sndPointXHandle, int32_t sndPointYHandle);
// extern void      w2_doubleEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t pointXHandle, int32_t pointYHandle);
// extern int32_t   w2_isOnCurveEC(void* context, int32_t ecHandle, int32_t pointXHandle, int32_t pointYHandle);
// extern int32_t   w2_scalarBaseMultEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t dataOffset, int32_t length);
// extern int32_t   w2_managedScalarBaseMultEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t dataHandle);
// extern int32_t   w2_scalarMultEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t pointXHandle, int32_t pointYHandle, int32_t dataOffset, int32_t length);
// extern int32_t   w2_managedScalarMultEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t pointXHandle, int32_t pointYHandle, int32_t dataHandle);
// extern int32_t   w2_marshalEC(void* context, int32_t xPairHandle, int32_t yPairHandle, int32_t ecHandle, int32_t resultOffset);
// extern int32_t   w2_managedMarshalEC(void* context, int32_t xPairHandle, int32_t yPairHandle, int32_t ecHandle, int32_t resultHandle);
// extern int32_t   w2_marshalCompressedEC(void* context, int32_t xPairHandle, int32_t yPairHandle, int32_t ecHandle, int32_t resultOffset);
// extern int32_t   w2_managedMarshalCompressedEC(void* context, int32_t xPairHandle, int32_t yPairHandle, int32_t ecHandle, int32_t resultHandle);
// extern int32_t   w2_unmarshalEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t dataOffset, int32_t length);
// extern int32_t   w2_managedUnmarshalEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t dataHandle);
// extern int32_t   w2_unmarshalCompressedEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t dataOffset, int32_t length);
// extern int32_t   w2_managedUnmarshalCompressedEC(void* context, int32_t xResultHandle, int32_t yResultHandle, int32_t ecHandle, int32_t dataHandle);
// extern int32_t   w2_generateKeyEC(void* context, int32_t xPubKeyHandle, int32_t yPubKeyHandle, int32_t ecHandle, int32_t resultOffset);
// extern int32_t   w2_managedGenerateKeyEC(void* context, int32_t xPubKeyHandle, int32_t yPubKeyHandle, int32_t ecHandle, int32_t resultHandle);
// extern int32_t   w2_createEC(void* context, int32_t dataOffset, int32_t dataLength);
// extern int32_t   w2_managedCreateEC(void* context, int32_t dataHandle);
// extern int32_t   w2_getCurveLengthEC(void* context, int32_t ecHandle);
// extern int32_t   w2_getPrivKeyByteLengthEC(void* context, int32_t ecHandle);
// extern int32_t   w2_ellipticCurveGetValues(void* context, int32_t ecHandle, int32_t fieldOrderHandle, int32_t basePointOrderHandle, int32_t eqConstantHandle, int32_t xBasePointHandle, int32_t yBasePointHandle);
// extern int32_t   w2_managedVerifySecp256r1(void* context, int32_t keyHandle, int32_t messageHandle, int32_t sigHandle);
// extern int32_t   w2_managedVerifyBLSSignatureShare(void* context, int32_t keyHandle, int32_t messageHandle, int32_t sigHandle);
// extern int32_t   w2_managedVerifyBLSAggregatedSignature(void* context, int32_t keyHandle, int32_t messageHandle, int32_t sigHandle);
import "C"

import (
	"unsafe"

	"github.com/multiversx/mx-chain-vm-go/executor"
)

// populateCgoFunctionPointers populates imports with the BaseOpsAPI API methods
func populateCgoFunctionPointers() *cWasmerVmHookPointers {
	return &cWasmerVmHookPointers{
		get_gas_left_func_ptr:                                    funcPointer(C.w2_getGasLeft),
		get_sc_address_func_ptr:                                  funcPointer(C.w2_getSCAddress),
		get_owner_address_func_ptr:                               funcPointer(C.w2_getOwnerAddress),
		get_shard_of_address_func_ptr:                            funcPointer(C.w2_getShardOfAddress),
		is_smart_contract_func_ptr:                               funcPointer(C.w2_isSmartContract),
		signal_error_func_ptr:                                    funcPointer(C.w2_signalError),
		get_external_balance_func_ptr:                            funcPointer(C.w2_getExternalBalance),
		get_block_hash_func_ptr:                                  funcPointer(C.w2_getBlockHash),
		get_esdt_balance_func_ptr:                                funcPointer(C.w2_getESDTBalance),
		get_esdt_nft_name_length_func_ptr:                        funcPointer(C.w2_getESDTNFTNameLength),
		get_esdt_nft_attribute_length_func_ptr:                   funcPointer(C.w2_getESDTNFTAttributeLength),
		get_esdt_nft_uri_length_func_ptr:                         funcPointer(C.w2_getESDTNFTURILength),
		get_esdt_token_data_func_ptr:                             funcPointer(C.w2_getESDTTokenData),
		get_esdt_local_roles_func_ptr:                            funcPointer(C.w2_getESDTLocalRoles),
		validate_token_identifier_func_ptr:                       funcPointer(C.w2_validateTokenIdentifier),
		transfer_value_func_ptr:                                  funcPointer(C.w2_transferValue),
		transfer_value_execute_func_ptr:                          funcPointer(C.w2_transferValueExecute),
		transfer_esdt_execute_func_ptr:                           funcPointer(C.w2_transferESDTExecute),
		transfer_esdt_nft_execute_func_ptr:                       funcPointer(C.w2_transferESDTNFTExecute),
		multi_transfer_esdt_nft_execute_func_ptr:                 funcPointer(C.w2_multiTransferESDTNFTExecute),
		create_async_call_func_ptr:                               funcPointer(C.w2_createAsyncCall),
		set_async_context_callback_func_ptr:                      funcPointer(C.w2_setAsyncContextCallback),
		upgrade_contract_func_ptr:                                funcPointer(C.w2_upgradeContract),
		upgrade_from_source_contract_func_ptr:                    funcPointer(C.w2_upgradeFromSourceContract),
		delete_contract_func_ptr:                                 funcPointer(C.w2_deleteContract),
		async_call_func_ptr:                                      funcPointer(C.w2_asyncCall),
		get_argument_length_func_ptr:                             funcPointer(C.w2_getArgumentLength),
		get_argument_func_ptr:                                    funcPointer(C.w2_getArgument),
		get_function_func_ptr:                                    funcPointer(C.w2_getFunction),
		get_num_arguments_func_ptr:                               funcPointer(C.w2_getNumArguments),
		storage_store_func_ptr:                                   funcPointer(C.w2_storageStore),
		storage_load_length_func_ptr:                             funcPointer(C.w2_storageLoadLength),
		storage_load_from_address_func_ptr:                       funcPointer(C.w2_storageLoadFromAddress),
		storage_load_func_ptr:                                    funcPointer(C.w2_storageLoad),
		set_storage_lock_func_ptr:                                funcPointer(C.w2_setStorageLock),
		get_storage_lock_func_ptr:                                funcPointer(C.w2_getStorageLock),
		is_storage_locked_func_ptr:                               funcPointer(C.w2_isStorageLocked),
		clear_storage_lock_func_ptr:                              funcPointer(C.w2_clearStorageLock),
		get_caller_func_ptr:                                      funcPointer(C.w2_getCaller),
		check_no_payment_func_ptr:                                funcPointer(C.w2_checkNoPayment),
		get_call_value_func_ptr:                                  funcPointer(C.w2_getCallValue),
		get_esdt_value_func_ptr:                                  funcPointer(C.w2_getESDTValue),
		get_esdt_value_by_index_func_ptr:                         funcPointer(C.w2_getESDTValueByIndex),
		get_esdt_token_name_func_ptr:                             funcPointer(C.w2_getESDTTokenName),
		get_esdt_token_name_by_index_func_ptr:                    funcPointer(C.w2_getESDTTokenNameByIndex),
		get_esdt_token_nonce_func_ptr:                            funcPointer(C.w2_getESDTTokenNonce),
		get_esdt_token_nonce_by_index_func_ptr:                   funcPointer(C.w2_getESDTTokenNonceByIndex),
		get_current_esdt_nft_nonce_func_ptr:                      funcPointer(C.w2_getCurrentESDTNFTNonce),
		get_esdt_token_type_func_ptr:                             funcPointer(C.w2_getESDTTokenType),
		get_esdt_token_type_by_index_func_ptr:                    funcPointer(C.w2_getESDTTokenTypeByIndex),
		get_num_esdt_transfers_func_ptr:                          funcPointer(C.w2_getNumESDTTransfers),
		get_call_value_token_name_func_ptr:                       funcPointer(C.w2_getCallValueTokenName),
		get_call_value_token_name_by_index_func_ptr:              funcPointer(C.w2_getCallValueTokenNameByIndex),
		is_reserved_function_name_func_ptr:                       funcPointer(C.w2_isReservedFunctionName),
		write_log_func_ptr:                                       funcPointer(C.w2_writeLog),
		write_event_log_func_ptr:                                 funcPointer(C.w2_writeEventLog),
		get_block_timestamp_func_ptr:                             funcPointer(C.w2_getBlockTimestamp),
		get_block_nonce_func_ptr:                                 funcPointer(C.w2_getBlockNonce),
		get_block_round_func_ptr:                                 funcPointer(C.w2_getBlockRound),
		get_block_epoch_func_ptr:                                 funcPointer(C.w2_getBlockEpoch),
		get_block_random_seed_func_ptr:                           funcPointer(C.w2_getBlockRandomSeed),
		get_state_root_hash_func_ptr:                             funcPointer(C.w2_getStateRootHash),
		get_prev_block_timestamp_func_ptr:                        funcPointer(C.w2_getPrevBlockTimestamp),
		get_prev_block_nonce_func_ptr:                            funcPointer(C.w2_getPrevBlockNonce),
		get_prev_block_round_func_ptr:                            funcPointer(C.w2_getPrevBlockRound),
		get_prev_block_epoch_func_ptr:                            funcPointer(C.w2_getPrevBlockEpoch),
		get_prev_block_random_seed_func_ptr:                      funcPointer(C.w2_getPrevBlockRandomSeed),
		finish_func_ptr:                                          funcPointer(C.w2_finish),
		execute_on_same_context_func_ptr:                         funcPointer(C.w2_executeOnSameContext),
		execute_on_dest_context_func_ptr:                         funcPointer(C.w2_executeOnDestContext),
		execute_read_only_func_ptr:                               funcPointer(C.w2_executeReadOnly),
		create_contract_func_ptr:                                 funcPointer(C.w2_createContract),
		deploy_from_source_contract_func_ptr:                     funcPointer(C.w2_deployFromSourceContract),
		get_num_return_data_func_ptr:                             funcPointer(C.w2_getNumReturnData),
		get_return_data_size_func_ptr:                            funcPointer(C.w2_getReturnDataSize),
		get_return_data_func_ptr:                                 funcPointer(C.w2_getReturnData),
		clean_return_data_func_ptr:                               funcPointer(C.w2_cleanReturnData),
		delete_from_return_data_func_ptr:                         funcPointer(C.w2_deleteFromReturnData),
		get_original_tx_hash_func_ptr:                            funcPointer(C.w2_getOriginalTxHash),
		get_current_tx_hash_func_ptr:                             funcPointer(C.w2_getCurrentTxHash),
		get_prev_tx_hash_func_ptr:                                funcPointer(C.w2_getPrevTxHash),
		managed_sc_address_func_ptr:                              funcPointer(C.w2_managedSCAddress),
		managed_owner_address_func_ptr:                           funcPointer(C.w2_managedOwnerAddress),
		managed_caller_func_ptr:                                  funcPointer(C.w2_managedCaller),
		managed_get_original_caller_addr_func_ptr:                funcPointer(C.w2_managedGetOriginalCallerAddr),
		managed_get_relayer_addr_func_ptr:                        funcPointer(C.w2_managedGetRelayerAddr),
		managed_signal_error_func_ptr:                            funcPointer(C.w2_managedSignalError),
		managed_write_log_func_ptr:                               funcPointer(C.w2_managedWriteLog),
		managed_get_original_tx_hash_func_ptr:                    funcPointer(C.w2_managedGetOriginalTxHash),
		managed_get_state_root_hash_func_ptr:                     funcPointer(C.w2_managedGetStateRootHash),
		managed_get_block_random_seed_func_ptr:                   funcPointer(C.w2_managedGetBlockRandomSeed),
		managed_get_prev_block_random_seed_func_ptr:              funcPointer(C.w2_managedGetPrevBlockRandomSeed),
		managed_get_return_data_func_ptr:                         funcPointer(C.w2_managedGetReturnData),
		managed_get_multi_esdt_call_value_func_ptr:               funcPointer(C.w2_managedGetMultiESDTCallValue),
		managed_get_back_transfers_func_ptr:                      funcPointer(C.w2_managedGetBackTransfers),
		managed_get_esdt_balance_func_ptr:                        funcPointer(C.w2_managedGetESDTBalance),
		managed_get_esdt_token_data_func_ptr:                     funcPointer(C.w2_managedGetESDTTokenData),
		managed_async_call_func_ptr:                              funcPointer(C.w2_managedAsyncCall),
		managed_create_async_call_func_ptr:                       funcPointer(C.w2_managedCreateAsyncCall),
		managed_get_callback_closure_func_ptr:                    funcPointer(C.w2_managedGetCallbackClosure),
		managed_upgrade_from_source_contract_func_ptr:            funcPointer(C.w2_managedUpgradeFromSourceContract),
		managed_upgrade_contract_func_ptr:                        funcPointer(C.w2_managedUpgradeContract),
		managed_delete_contract_func_ptr:                         funcPointer(C.w2_managedDeleteContract),
		managed_deploy_from_source_contract_func_ptr:             funcPointer(C.w2_managedDeployFromSourceContract),
		managed_create_contract_func_ptr:                         funcPointer(C.w2_managedCreateContract),
		managed_execute_read_only_func_ptr:                       funcPointer(C.w2_managedExecuteReadOnly),
		managed_execute_on_same_context_func_ptr:                 funcPointer(C.w2_managedExecuteOnSameContext),
		managed_execute_on_dest_context_func_ptr:                 funcPointer(C.w2_managedExecuteOnDestContext),
		managed_multi_transfer_esdt_nft_execute_func_ptr:         funcPointer(C.w2_managedMultiTransferESDTNFTExecute),
		managed_multi_transfer_esdt_nft_execute_by_user_func_ptr: funcPointer(C.w2_managedMultiTransferESDTNFTExecuteByUser),
		managed_transfer_value_execute_func_ptr:                  funcPointer(C.w2_managedTransferValueExecute),
		managed_is_esdt_frozen_func_ptr:                          funcPointer(C.w2_managedIsESDTFrozen),
		managed_is_esdt_limited_transfer_func_ptr:                funcPointer(C.w2_managedIsESDTLimitedTransfer),
		managed_is_esdt_paused_func_ptr:                          funcPointer(C.w2_managedIsESDTPaused),
		managed_buffer_to_hex_func_ptr:                           funcPointer(C.w2_managedBufferToHex),
		managed_get_code_metadata_func_ptr:                       funcPointer(C.w2_managedGetCodeMetadata),
		managed_is_builtin_function_func_ptr:                     funcPointer(C.w2_managedIsBuiltinFunction),
		big_float_new_from_parts_func_ptr:                        funcPointer(C.w2_bigFloatNewFromParts),
		big_float_new_from_frac_func_ptr:                         funcPointer(C.w2_bigFloatNewFromFrac),
		big_float_new_from_sci_func_ptr:                          funcPointer(C.w2_bigFloatNewFromSci),
		big_float_add_func_ptr:                                   funcPointer(C.w2_bigFloatAdd),
		big_float_sub_func_ptr:                                   funcPointer(C.w2_bigFloatSub),
		big_float_mul_func_ptr:                                   funcPointer(C.w2_bigFloatMul),
		big_float_div_func_ptr:                                   funcPointer(C.w2_bigFloatDiv),
		big_float_neg_func_ptr:                                   funcPointer(C.w2_bigFloatNeg),
		big_float_clone_func_ptr:                                 funcPointer(C.w2_bigFloatClone),
		big_float_cmp_func_ptr:                                   funcPointer(C.w2_bigFloatCmp),
		big_float_abs_func_ptr:                                   funcPointer(C.w2_bigFloatAbs),
		big_float_sign_func_ptr:                                  funcPointer(C.w2_bigFloatSign),
		big_float_sqrt_func_ptr:                                  funcPointer(C.w2_bigFloatSqrt),
		big_float_pow_func_ptr:                                   funcPointer(C.w2_bigFloatPow),
		big_float_floor_func_ptr:                                 funcPointer(C.w2_bigFloatFloor),
		big_float_ceil_func_ptr:                                  funcPointer(C.w2_bigFloatCeil),
		big_float_truncate_func_ptr:                              funcPointer(C.w2_bigFloatTruncate),
		big_float_set_int64_func_ptr:                             funcPointer(C.w2_bigFloatSetInt64),
		big_float_is_int_func_ptr:                                funcPointer(C.w2_bigFloatIsInt),
		big_float_set_big_int_func_ptr:                           funcPointer(C.w2_bigFloatSetBigInt),
		big_float_get_const_pi_func_ptr:                          funcPointer(C.w2_bigFloatGetConstPi),
		big_float_get_const_e_func_ptr:                           funcPointer(C.w2_bigFloatGetConstE),
		big_int_get_unsigned_argument_func_ptr:                   funcPointer(C.w2_bigIntGetUnsignedArgument),
		big_int_get_signed_argument_func_ptr:                     funcPointer(C.w2_bigIntGetSignedArgument),
		big_int_storage_store_unsigned_func_ptr:                  funcPointer(C.w2_bigIntStorageStoreUnsigned),
		big_int_storage_load_unsigned_func_ptr:                   funcPointer(C.w2_bigIntStorageLoadUnsigned),
		big_int_get_call_value_func_ptr:                          funcPointer(C.w2_bigIntGetCallValue),
		big_int_get_esdt_call_value_func_ptr:                     funcPointer(C.w2_bigIntGetESDTCallValue),
		big_int_get_esdt_call_value_by_index_func_ptr:            funcPointer(C.w2_bigIntGetESDTCallValueByIndex),
		big_int_get_external_balance_func_ptr:                    funcPointer(C.w2_bigIntGetExternalBalance),
		big_int_get_esdt_external_balance_func_ptr:               funcPointer(C.w2_bigIntGetESDTExternalBalance),
		big_int_new_func_ptr:                                     funcPointer(C.w2_bigIntNew),
		big_int_unsigned_byte_length_func_ptr:                    funcPointer(C.w2_bigIntUnsignedByteLength),
		big_int_signed_byte_length_func_ptr:                      funcPointer(C.w2_bigIntSignedByteLength),
		big_int_get_unsigned_bytes_func_ptr:                      funcPointer(C.w2_bigIntGetUnsignedBytes),
		big_int_get_signed_bytes_func_ptr:                        funcPointer(C.w2_bigIntGetSignedBytes),
		big_int_set_unsigned_bytes_func_ptr:                      funcPointer(C.w2_bigIntSetUnsignedBytes),
		big_int_set_signed_bytes_func_ptr:                        funcPointer(C.w2_bigIntSetSignedBytes),
		big_int_is_int64_func_ptr:                                funcPointer(C.w2_bigIntIsInt64),
		big_int_get_int64_func_ptr:                               funcPointer(C.w2_bigIntGetInt64),
		big_int_set_int64_func_ptr:                               funcPointer(C.w2_bigIntSetInt64),
		big_int_add_func_ptr:                                     funcPointer(C.w2_bigIntAdd),
		big_int_sub_func_ptr:                                     funcPointer(C.w2_bigIntSub),
		big_int_mul_func_ptr:                                     funcPointer(C.w2_bigIntMul),
		big_int_tdiv_func_ptr:                                    funcPointer(C.w2_bigIntTDiv),
		big_int_tmod_func_ptr:                                    funcPointer(C.w2_bigIntTMod),
		big_int_ediv_func_ptr:                                    funcPointer(C.w2_bigIntEDiv),
		big_int_emod_func_ptr:                                    funcPointer(C.w2_bigIntEMod),
		big_int_sqrt_func_ptr:                                    funcPointer(C.w2_bigIntSqrt),
		big_int_pow_func_ptr:                                     funcPointer(C.w2_bigIntPow),
		big_int_log2_func_ptr:                                    funcPointer(C.w2_bigIntLog2),
		big_int_abs_func_ptr:                                     funcPointer(C.w2_bigIntAbs),
		big_int_neg_func_ptr:                                     funcPointer(C.w2_bigIntNeg),
		big_int_sign_func_ptr:                                    funcPointer(C.w2_bigIntSign),
		big_int_cmp_func_ptr:                                     funcPointer(C.w2_bigIntCmp),
		big_int_not_func_ptr:                                     funcPointer(C.w2_bigIntNot),
		big_int_and_func_ptr:                                     funcPointer(C.w2_bigIntAnd),
		big_int_or_func_ptr:                                      funcPointer(C.w2_bigIntOr),
		big_int_xor_func_ptr:                                     funcPointer(C.w2_bigIntXor),
		big_int_shr_func_ptr:                                     funcPointer(C.w2_bigIntShr),
		big_int_shl_func_ptr:                                     funcPointer(C.w2_bigIntShl),
		big_int_finish_unsigned_func_ptr:                         funcPointer(C.w2_bigIntFinishUnsigned),
		big_int_finish_signed_func_ptr:                           funcPointer(C.w2_bigIntFinishSigned),
		big_int_to_string_func_ptr:                               funcPointer(C.w2_bigIntToString),
		mbuffer_new_func_ptr:                                     funcPointer(C.w2_mBufferNew),
		mbuffer_new_from_bytes_func_ptr:                          funcPointer(C.w2_mBufferNewFromBytes),
		mbuffer_get_length_func_ptr:                              funcPointer(C.w2_mBufferGetLength),
		mbuffer_get_bytes_func_ptr:                               funcPointer(C.w2_mBufferGetBytes),
		mbuffer_get_byte_slice_func_ptr:                          funcPointer(C.w2_mBufferGetByteSlice),
		mbuffer_copy_byte_slice_func_ptr:                         funcPointer(C.w2_mBufferCopyByteSlice),
		mbuffer_eq_func_ptr:                                      funcPointer(C.w2_mBufferEq),
		mbuffer_set_bytes_func_ptr:                               funcPointer(C.w2_mBufferSetBytes),
		mbuffer_set_byte_slice_func_ptr:                          funcPointer(C.w2_mBufferSetByteSlice),
		mbuffer_append_func_ptr:                                  funcPointer(C.w2_mBufferAppend),
		mbuffer_append_bytes_func_ptr:                            funcPointer(C.w2_mBufferAppendBytes),
		mbuffer_to_big_int_unsigned_func_ptr:                     funcPointer(C.w2_mBufferToBigIntUnsigned),
		mbuffer_to_big_int_signed_func_ptr:                       funcPointer(C.w2_mBufferToBigIntSigned),
		mbuffer_from_big_int_unsigned_func_ptr:                   funcPointer(C.w2_mBufferFromBigIntUnsigned),
		mbuffer_from_big_int_signed_func_ptr:                     funcPointer(C.w2_mBufferFromBigIntSigned),
		mbuffer_to_big_float_func_ptr:                            funcPointer(C.w2_mBufferToBigFloat),
		mbuffer_from_big_float_func_ptr:                          funcPointer(C.w2_mBufferFromBigFloat),
		mbuffer_storage_store_func_ptr:                           funcPointer(C.w2_mBufferStorageStore),
		mbuffer_storage_load_func_ptr:                            funcPointer(C.w2_mBufferStorageLoad),
		mbuffer_storage_load_from_address_func_ptr:               funcPointer(C.w2_mBufferStorageLoadFromAddress),
		mbuffer_get_argument_func_ptr:                            funcPointer(C.w2_mBufferGetArgument),
		mbuffer_finish_func_ptr:                                  funcPointer(C.w2_mBufferFinish),
		mbuffer_set_random_func_ptr:                              funcPointer(C.w2_mBufferSetRandom),
		managed_map_new_func_ptr:                                 funcPointer(C.w2_managedMapNew),
		managed_map_put_func_ptr:                                 funcPointer(C.w2_managedMapPut),
		managed_map_get_func_ptr:                                 funcPointer(C.w2_managedMapGet),
		managed_map_remove_func_ptr:                              funcPointer(C.w2_managedMapRemove),
		managed_map_contains_func_ptr:                            funcPointer(C.w2_managedMapContains),
		small_int_get_unsigned_argument_func_ptr:                 funcPointer(C.w2_smallIntGetUnsignedArgument),
		small_int_get_signed_argument_func_ptr:                   funcPointer(C.w2_smallIntGetSignedArgument),
		small_int_finish_unsigned_func_ptr:                       funcPointer(C.w2_smallIntFinishUnsigned),
		small_int_finish_signed_func_ptr:                         funcPointer(C.w2_smallIntFinishSigned),
		small_int_storage_store_unsigned_func_ptr:                funcPointer(C.w2_smallIntStorageStoreUnsigned),
		small_int_storage_store_signed_func_ptr:                  funcPointer(C.w2_smallIntStorageStoreSigned),
		small_int_storage_load_unsigned_func_ptr:                 funcPointer(C.w2_smallIntStorageLoadUnsigned),
		small_int_storage_load_signed_func_ptr:                   funcPointer(C.w2_smallIntStorageLoadSigned),
		int64get_argument_func_ptr:                               funcPointer(C.w2_int64getArgument),
		int64finish_func_ptr:                                     funcPointer(C.w2_int64finish),
		int64storage_store_func_ptr:                              funcPointer(C.w2_int64storageStore),
		int64storage_load_func_ptr:                               funcPointer(C.w2_int64storageLoad),
		sha256_func_ptr:                                          funcPointer(C.w2_sha256),
		managed_sha256_func_ptr:                                  funcPointer(C.w2_managedSha256),
		keccak256_func_ptr:                                       funcPointer(C.w2_keccak256),
		managed_keccak256_func_ptr:                               funcPointer(C.w2_managedKeccak256),
		ripemd160_func_ptr:                                       funcPointer(C.w2_ripemd160),
		managed_ripemd160_func_ptr:                               funcPointer(C.w2_managedRipemd160),
		verify_bls_func_ptr:                                      funcPointer(C.w2_verifyBLS),
		managed_verify_bls_func_ptr:                              funcPointer(C.w2_managedVerifyBLS),
		verify_ed25519_func_ptr:                                  funcPointer(C.w2_verifyEd25519),
		managed_verify_ed25519_func_ptr:                          funcPointer(C.w2_managedVerifyEd25519),
		verify_custom_secp256k1_func_ptr:                         funcPointer(C.w2_verifyCustomSecp256k1),
		managed_verify_custom_secp256k1_func_ptr:                 funcPointer(C.w2_managedVerifyCustomSecp256k1),
		verify_secp256k1_func_ptr:                                funcPointer(C.w2_verifySecp256k1),
		managed_verify_secp256k1_func_ptr:                        funcPointer(C.w2_managedVerifySecp256k1),
		encode_secp256k1_der_signature_func_ptr:                  funcPointer(C.w2_encodeSecp256k1DerSignature),
		managed_encode_secp256k1_der_signature_func_ptr:          funcPointer(C.w2_managedEncodeSecp256k1DerSignature),
		add_ec_func_ptr:                                          funcPointer(C.w2_addEC),
		double_ec_func_ptr:                                       funcPointer(C.w2_doubleEC),
		is_on_curve_ec_func_ptr:                                  funcPointer(C.w2_isOnCurveEC),
		scalar_base_mult_ec_func_ptr:                             funcPointer(C.w2_scalarBaseMultEC),
		managed_scalar_base_mult_ec_func_ptr:                     funcPointer(C.w2_managedScalarBaseMultEC),
		scalar_mult_ec_func_ptr:                                  funcPointer(C.w2_scalarMultEC),
		managed_scalar_mult_ec_func_ptr:                          funcPointer(C.w2_managedScalarMultEC),
		marshal_ec_func_ptr:                                      funcPointer(C.w2_marshalEC),
		managed_marshal_ec_func_ptr:                              funcPointer(C.w2_managedMarshalEC),
		marshal_compressed_ec_func_ptr:                           funcPointer(C.w2_marshalCompressedEC),
		managed_marshal_compressed_ec_func_ptr:                   funcPointer(C.w2_managedMarshalCompressedEC),
		unmarshal_ec_func_ptr:                                    funcPointer(C.w2_unmarshalEC),
		managed_unmarshal_ec_func_ptr:                            funcPointer(C.w2_managedUnmarshalEC),
		unmarshal_compressed_ec_func_ptr:                         funcPointer(C.w2_unmarshalCompressedEC),
		managed_unmarshal_compressed_ec_func_ptr:                 funcPointer(C.w2_managedUnmarshalCompressedEC),
		generate_key_ec_func_ptr:                                 funcPointer(C.w2_generateKeyEC),
		managed_generate_key_ec_func_ptr:                         funcPointer(C.w2_managedGenerateKeyEC),
		create_ec_func_ptr:                                       funcPointer(C.w2_createEC),
		managed_create_ec_func_ptr:                               funcPointer(C.w2_managedCreateEC),
		get_curve_length_ec_func_ptr:                             funcPointer(C.w2_getCurveLengthEC),
		get_priv_key_byte_length_ec_func_ptr:                     funcPointer(C.w2_getPrivKeyByteLengthEC),
		elliptic_curve_get_values_func_ptr:                       funcPointer(C.w2_ellipticCurveGetValues),
		managed_verify_secp256r1_func_ptr:                        funcPointer(C.w2_managedVerifySecp256r1),
		managed_verify_blssignature_share_func_ptr:               funcPointer(C.w2_managedVerifyBLSSignatureShare),
		managed_verify_blsaggregated_signature_func_ptr:          funcPointer(C.w2_managedVerifyBLSAggregatedSignature),
	}
}

//export w2_getGasLeft
func w2_getGasLeft(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetGasLeft()
}

//export w2_getSCAddress
func w2_getSCAddress(context unsafe.Pointer, resultOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetSCAddress(executor.MemPtr(resultOffset))
}

//export w2_getOwnerAddress
func w2_getOwnerAddress(context unsafe.Pointer, resultOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetOwnerAddress(executor.MemPtr(resultOffset))
}

//export w2_getShardOfAddress
func w2_getShardOfAddress(context unsafe.Pointer, addressOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetShardOfAddress(executor.MemPtr(addressOffset))
}

//export w2_isSmartContract
func w2_isSmartContract(context unsafe.Pointer, addressOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.IsSmartContract(executor.MemPtr(addressOffset))
}

//export w2_signalError
func w2_signalError(context unsafe.Pointer, messageOffset int32, messageLength int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.SignalError(executor.MemPtr(messageOffset), messageLength)
}

//export w2_getExternalBalance
func w2_getExternalBalance(context unsafe.Pointer, addressOffset int32, resultOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetExternalBalance(executor.MemPtr(addressOffset), executor.MemPtr(resultOffset))
}

//export w2_getBlockHash
func w2_getBlockHash(context unsafe.Pointer, nonce int64, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetBlockHash(nonce, executor.MemPtr(resultOffset))
}

//export w2_getESDTBalance
func w2_getESDTBalance(context unsafe.Pointer, addressOffset int32, tokenIDOffset int32, tokenIDLen int32, nonce int64, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTBalance(executor.MemPtr(addressOffset), executor.MemPtr(tokenIDOffset), tokenIDLen, nonce, executor.MemPtr(resultOffset))
}

//export w2_getESDTNFTNameLength
func w2_getESDTNFTNameLength(context unsafe.Pointer, addressOffset int32, tokenIDOffset int32, tokenIDLen int32, nonce int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTNFTNameLength(executor.MemPtr(addressOffset), executor.MemPtr(tokenIDOffset), tokenIDLen, nonce)
}

//export w2_getESDTNFTAttributeLength
func w2_getESDTNFTAttributeLength(context unsafe.Pointer, addressOffset int32, tokenIDOffset int32, tokenIDLen int32, nonce int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTNFTAttributeLength(executor.MemPtr(addressOffset), executor.MemPtr(tokenIDOffset), tokenIDLen, nonce)
}

//export w2_getESDTNFTURILength
func w2_getESDTNFTURILength(context unsafe.Pointer, addressOffset int32, tokenIDOffset int32, tokenIDLen int32, nonce int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTNFTURILength(executor.MemPtr(addressOffset), executor.MemPtr(tokenIDOffset), tokenIDLen, nonce)
}

//export w2_getESDTTokenData
func w2_getESDTTokenData(context unsafe.Pointer, addressOffset int32, tokenIDOffset int32, tokenIDLen int32, nonce int64, valueHandle int32, propertiesOffset int32, hashOffset int32, nameOffset int32, attributesOffset int32, creatorOffset int32, royaltiesHandle int32, urisOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTTokenData(executor.MemPtr(addressOffset), executor.MemPtr(tokenIDOffset), tokenIDLen, nonce, valueHandle, executor.MemPtr(propertiesOffset), executor.MemPtr(hashOffset), executor.MemPtr(nameOffset), executor.MemPtr(attributesOffset), executor.MemPtr(creatorOffset), royaltiesHandle, executor.MemPtr(urisOffset))
}

//export w2_getESDTLocalRoles
func w2_getESDTLocalRoles(context unsafe.Pointer, tokenIdHandle int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTLocalRoles(tokenIdHandle)
}

//export w2_validateTokenIdentifier
func w2_validateTokenIdentifier(context unsafe.Pointer, tokenIdHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ValidateTokenIdentifier(tokenIdHandle)
}

//export w2_transferValue
func w2_transferValue(context unsafe.Pointer, destOffset int32, valueOffset int32, dataOffset int32, length int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.TransferValue(executor.MemPtr(destOffset), executor.MemPtr(valueOffset), executor.MemPtr(dataOffset), length)
}

//export w2_transferValueExecute
func w2_transferValueExecute(context unsafe.Pointer, destOffset int32, valueOffset int32, gasLimit int64, functionOffset int32, functionLength int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.TransferValueExecute(executor.MemPtr(destOffset), executor.MemPtr(valueOffset), gasLimit, executor.MemPtr(functionOffset), functionLength, numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_transferESDTExecute
func w2_transferESDTExecute(context unsafe.Pointer, destOffset int32, tokenIDOffset int32, tokenIDLen int32, valueOffset int32, gasLimit int64, functionOffset int32, functionLength int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.TransferESDTExecute(executor.MemPtr(destOffset), executor.MemPtr(tokenIDOffset), tokenIDLen, executor.MemPtr(valueOffset), gasLimit, executor.MemPtr(functionOffset), functionLength, numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_transferESDTNFTExecute
func w2_transferESDTNFTExecute(context unsafe.Pointer, destOffset int32, tokenIDOffset int32, tokenIDLen int32, valueOffset int32, nonce int64, gasLimit int64, functionOffset int32, functionLength int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.TransferESDTNFTExecute(executor.MemPtr(destOffset), executor.MemPtr(tokenIDOffset), tokenIDLen, executor.MemPtr(valueOffset), nonce, gasLimit, executor.MemPtr(functionOffset), functionLength, numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_multiTransferESDTNFTExecute
func w2_multiTransferESDTNFTExecute(context unsafe.Pointer, destOffset int32, numTokenTransfers int32, tokenTransfersArgsLengthOffset int32, tokenTransferDataOffset int32, gasLimit int64, functionOffset int32, functionLength int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MultiTransferESDTNFTExecute(executor.MemPtr(destOffset), numTokenTransfers, executor.MemPtr(tokenTransfersArgsLengthOffset), executor.MemPtr(tokenTransferDataOffset), gasLimit, executor.MemPtr(functionOffset), functionLength, numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_createAsyncCall
func w2_createAsyncCall(context unsafe.Pointer, destOffset int32, valueOffset int32, dataOffset int32, dataLength int32, successOffset int32, successLength int32, errorOffset int32, errorLength int32, gas int64, extraGasForCallback int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.CreateAsyncCall(executor.MemPtr(destOffset), executor.MemPtr(valueOffset), executor.MemPtr(dataOffset), dataLength, executor.MemPtr(successOffset), successLength, executor.MemPtr(errorOffset), errorLength, gas, extraGasForCallback)
}

//export w2_setAsyncContextCallback
func w2_setAsyncContextCallback(context unsafe.Pointer, callback int32, callbackLength int32, data int32, dataLength int32, gas int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.SetAsyncContextCallback(executor.MemPtr(callback), callbackLength, executor.MemPtr(data), dataLength, gas)
}

//export w2_upgradeContract
func w2_upgradeContract(context unsafe.Pointer, destOffset int32, gasLimit int64, valueOffset int32, codeOffset int32, codeMetadataOffset int32, length int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.UpgradeContract(executor.MemPtr(destOffset), gasLimit, executor.MemPtr(valueOffset), executor.MemPtr(codeOffset), executor.MemPtr(codeMetadataOffset), length, numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_upgradeFromSourceContract
func w2_upgradeFromSourceContract(context unsafe.Pointer, destOffset int32, gasLimit int64, valueOffset int32, sourceContractAddressOffset int32, codeMetadataOffset int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.UpgradeFromSourceContract(executor.MemPtr(destOffset), gasLimit, executor.MemPtr(valueOffset), executor.MemPtr(sourceContractAddressOffset), executor.MemPtr(codeMetadataOffset), numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_deleteContract
func w2_deleteContract(context unsafe.Pointer, destOffset int32, gasLimit int64, numArguments int32, argumentsLengthOffset int32, dataOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.DeleteContract(executor.MemPtr(destOffset), gasLimit, numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_asyncCall
func w2_asyncCall(context unsafe.Pointer, destOffset int32, valueOffset int32, dataOffset int32, length int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.AsyncCall(executor.MemPtr(destOffset), executor.MemPtr(valueOffset), executor.MemPtr(dataOffset), length)
}

//export w2_getArgumentLength
func w2_getArgumentLength(context unsafe.Pointer, id int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetArgumentLength(id)
}

//export w2_getArgument
func w2_getArgument(context unsafe.Pointer, id int32, argOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetArgument(id, executor.MemPtr(argOffset))
}

//export w2_getFunction
func w2_getFunction(context unsafe.Pointer, functionOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetFunction(executor.MemPtr(functionOffset))
}

//export w2_getNumArguments
func w2_getNumArguments(context unsafe.Pointer) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetNumArguments()
}

//export w2_storageStore
func w2_storageStore(context unsafe.Pointer, keyOffset int32, keyLength int32, dataOffset int32, dataLength int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.StorageStore(executor.MemPtr(keyOffset), keyLength, executor.MemPtr(dataOffset), dataLength)
}

//export w2_storageLoadLength
func w2_storageLoadLength(context unsafe.Pointer, keyOffset int32, keyLength int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.StorageLoadLength(executor.MemPtr(keyOffset), keyLength)
}

//export w2_storageLoadFromAddress
func w2_storageLoadFromAddress(context unsafe.Pointer, addressOffset int32, keyOffset int32, keyLength int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.StorageLoadFromAddress(executor.MemPtr(addressOffset), executor.MemPtr(keyOffset), keyLength, executor.MemPtr(dataOffset))
}

//export w2_storageLoad
func w2_storageLoad(context unsafe.Pointer, keyOffset int32, keyLength int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.StorageLoad(executor.MemPtr(keyOffset), keyLength, executor.MemPtr(dataOffset))
}

//export w2_setStorageLock
func w2_setStorageLock(context unsafe.Pointer, keyOffset int32, keyLength int32, lockTimestamp int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.SetStorageLock(executor.MemPtr(keyOffset), keyLength, lockTimestamp)
}

//export w2_getStorageLock
func w2_getStorageLock(context unsafe.Pointer, keyOffset int32, keyLength int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetStorageLock(executor.MemPtr(keyOffset), keyLength)
}

//export w2_isStorageLocked
func w2_isStorageLocked(context unsafe.Pointer, keyOffset int32, keyLength int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.IsStorageLocked(executor.MemPtr(keyOffset), keyLength)
}

//export w2_clearStorageLock
func w2_clearStorageLock(context unsafe.Pointer, keyOffset int32, keyLength int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ClearStorageLock(executor.MemPtr(keyOffset), keyLength)
}

//export w2_getCaller
func w2_getCaller(context unsafe.Pointer, resultOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetCaller(executor.MemPtr(resultOffset))
}

//export w2_checkNoPayment
func w2_checkNoPayment(context unsafe.Pointer) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.CheckNoPayment()
}

//export w2_getCallValue
func w2_getCallValue(context unsafe.Pointer, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetCallValue(executor.MemPtr(resultOffset))
}

//export w2_getESDTValue
func w2_getESDTValue(context unsafe.Pointer, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTValue(executor.MemPtr(resultOffset))
}

//export w2_getESDTValueByIndex
func w2_getESDTValueByIndex(context unsafe.Pointer, resultOffset int32, index int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTValueByIndex(executor.MemPtr(resultOffset), index)
}

//export w2_getESDTTokenName
func w2_getESDTTokenName(context unsafe.Pointer, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTTokenName(executor.MemPtr(resultOffset))
}

//export w2_getESDTTokenNameByIndex
func w2_getESDTTokenNameByIndex(context unsafe.Pointer, resultOffset int32, index int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTTokenNameByIndex(executor.MemPtr(resultOffset), index)
}

//export w2_getESDTTokenNonce
func w2_getESDTTokenNonce(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTTokenNonce()
}

//export w2_getESDTTokenNonceByIndex
func w2_getESDTTokenNonceByIndex(context unsafe.Pointer, index int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTTokenNonceByIndex(index)
}

//export w2_getCurrentESDTNFTNonce
func w2_getCurrentESDTNFTNonce(context unsafe.Pointer, addressOffset int32, tokenIDOffset int32, tokenIDLen int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetCurrentESDTNFTNonce(executor.MemPtr(addressOffset), executor.MemPtr(tokenIDOffset), tokenIDLen)
}

//export w2_getESDTTokenType
func w2_getESDTTokenType(context unsafe.Pointer) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTTokenType()
}

//export w2_getESDTTokenTypeByIndex
func w2_getESDTTokenTypeByIndex(context unsafe.Pointer, index int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetESDTTokenTypeByIndex(index)
}

//export w2_getNumESDTTransfers
func w2_getNumESDTTransfers(context unsafe.Pointer) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetNumESDTTransfers()
}

//export w2_getCallValueTokenName
func w2_getCallValueTokenName(context unsafe.Pointer, callValueOffset int32, tokenNameOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetCallValueTokenName(executor.MemPtr(callValueOffset), executor.MemPtr(tokenNameOffset))
}

//export w2_getCallValueTokenNameByIndex
func w2_getCallValueTokenNameByIndex(context unsafe.Pointer, callValueOffset int32, tokenNameOffset int32, index int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetCallValueTokenNameByIndex(executor.MemPtr(callValueOffset), executor.MemPtr(tokenNameOffset), index)
}

//export w2_isReservedFunctionName
func w2_isReservedFunctionName(context unsafe.Pointer, nameHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.IsReservedFunctionName(nameHandle)
}

//export w2_writeLog
func w2_writeLog(context unsafe.Pointer, dataPointer int32, dataLength int32, topicPtr int32, numTopics int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.WriteLog(executor.MemPtr(dataPointer), dataLength, executor.MemPtr(topicPtr), numTopics)
}

//export w2_writeEventLog
func w2_writeEventLog(context unsafe.Pointer, numTopics int32, topicLengthsOffset int32, topicOffset int32, dataOffset int32, dataLength int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.WriteEventLog(numTopics, executor.MemPtr(topicLengthsOffset), executor.MemPtr(topicOffset), executor.MemPtr(dataOffset), dataLength)
}

//export w2_getBlockTimestamp
func w2_getBlockTimestamp(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetBlockTimestamp()
}

//export w2_getBlockNonce
func w2_getBlockNonce(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetBlockNonce()
}

//export w2_getBlockRound
func w2_getBlockRound(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetBlockRound()
}

//export w2_getBlockEpoch
func w2_getBlockEpoch(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetBlockEpoch()
}

//export w2_getBlockRandomSeed
func w2_getBlockRandomSeed(context unsafe.Pointer, pointer int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetBlockRandomSeed(executor.MemPtr(pointer))
}

//export w2_getStateRootHash
func w2_getStateRootHash(context unsafe.Pointer, pointer int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetStateRootHash(executor.MemPtr(pointer))
}

//export w2_getPrevBlockTimestamp
func w2_getPrevBlockTimestamp(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetPrevBlockTimestamp()
}

//export w2_getPrevBlockNonce
func w2_getPrevBlockNonce(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetPrevBlockNonce()
}

//export w2_getPrevBlockRound
func w2_getPrevBlockRound(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetPrevBlockRound()
}

//export w2_getPrevBlockEpoch
func w2_getPrevBlockEpoch(context unsafe.Pointer) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetPrevBlockEpoch()
}

//export w2_getPrevBlockRandomSeed
func w2_getPrevBlockRandomSeed(context unsafe.Pointer, pointer int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetPrevBlockRandomSeed(executor.MemPtr(pointer))
}

//export w2_finish
func w2_finish(context unsafe.Pointer, pointer int32, length int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.Finish(executor.MemPtr(pointer), length)
}

//export w2_executeOnSameContext
func w2_executeOnSameContext(context unsafe.Pointer, gasLimit int64, addressOffset int32, valueOffset int32, functionOffset int32, functionLength int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ExecuteOnSameContext(gasLimit, executor.MemPtr(addressOffset), executor.MemPtr(valueOffset), executor.MemPtr(functionOffset), functionLength, numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_executeOnDestContext
func w2_executeOnDestContext(context unsafe.Pointer, gasLimit int64, addressOffset int32, valueOffset int32, functionOffset int32, functionLength int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ExecuteOnDestContext(gasLimit, executor.MemPtr(addressOffset), executor.MemPtr(valueOffset), executor.MemPtr(functionOffset), functionLength, numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_executeReadOnly
func w2_executeReadOnly(context unsafe.Pointer, gasLimit int64, addressOffset int32, functionOffset int32, functionLength int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ExecuteReadOnly(gasLimit, executor.MemPtr(addressOffset), executor.MemPtr(functionOffset), functionLength, numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_createContract
func w2_createContract(context unsafe.Pointer, gasLimit int64, valueOffset int32, codeOffset int32, codeMetadataOffset int32, length int32, resultOffset int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.CreateContract(gasLimit, executor.MemPtr(valueOffset), executor.MemPtr(codeOffset), executor.MemPtr(codeMetadataOffset), length, executor.MemPtr(resultOffset), numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_deployFromSourceContract
func w2_deployFromSourceContract(context unsafe.Pointer, gasLimit int64, valueOffset int32, sourceContractAddressOffset int32, codeMetadataOffset int32, resultAddressOffset int32, numArguments int32, argumentsLengthOffset int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.DeployFromSourceContract(gasLimit, executor.MemPtr(valueOffset), executor.MemPtr(sourceContractAddressOffset), executor.MemPtr(codeMetadataOffset), executor.MemPtr(resultAddressOffset), numArguments, executor.MemPtr(argumentsLengthOffset), executor.MemPtr(dataOffset))
}

//export w2_getNumReturnData
func w2_getNumReturnData(context unsafe.Pointer) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetNumReturnData()
}

//export w2_getReturnDataSize
func w2_getReturnDataSize(context unsafe.Pointer, resultID int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetReturnDataSize(resultID)
}

//export w2_getReturnData
func w2_getReturnData(context unsafe.Pointer, resultID int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetReturnData(resultID, executor.MemPtr(dataOffset))
}

//export w2_cleanReturnData
func w2_cleanReturnData(context unsafe.Pointer) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.CleanReturnData()
}

//export w2_deleteFromReturnData
func w2_deleteFromReturnData(context unsafe.Pointer, resultID int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.DeleteFromReturnData(resultID)
}

//export w2_getOriginalTxHash
func w2_getOriginalTxHash(context unsafe.Pointer, dataOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetOriginalTxHash(executor.MemPtr(dataOffset))
}

//export w2_getCurrentTxHash
func w2_getCurrentTxHash(context unsafe.Pointer, dataOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetCurrentTxHash(executor.MemPtr(dataOffset))
}

//export w2_getPrevTxHash
func w2_getPrevTxHash(context unsafe.Pointer, dataOffset int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.GetPrevTxHash(executor.MemPtr(dataOffset))
}

//export w2_managedSCAddress
func w2_managedSCAddress(context unsafe.Pointer, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedSCAddress(destinationHandle)
}

//export w2_managedOwnerAddress
func w2_managedOwnerAddress(context unsafe.Pointer, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedOwnerAddress(destinationHandle)
}

//export w2_managedCaller
func w2_managedCaller(context unsafe.Pointer, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedCaller(destinationHandle)
}

//export w2_managedGetOriginalCallerAddr
func w2_managedGetOriginalCallerAddr(context unsafe.Pointer, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetOriginalCallerAddr(destinationHandle)
}

//export w2_managedGetRelayerAddr
func w2_managedGetRelayerAddr(context unsafe.Pointer, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetRelayerAddr(destinationHandle)
}

//export w2_managedSignalError
func w2_managedSignalError(context unsafe.Pointer, errHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedSignalError(errHandle)
}

//export w2_managedWriteLog
func w2_managedWriteLog(context unsafe.Pointer, topicsHandle int32, dataHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedWriteLog(topicsHandle, dataHandle)
}

//export w2_managedGetOriginalTxHash
func w2_managedGetOriginalTxHash(context unsafe.Pointer, resultHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetOriginalTxHash(resultHandle)
}

//export w2_managedGetStateRootHash
func w2_managedGetStateRootHash(context unsafe.Pointer, resultHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetStateRootHash(resultHandle)
}

//export w2_managedGetBlockRandomSeed
func w2_managedGetBlockRandomSeed(context unsafe.Pointer, resultHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetBlockRandomSeed(resultHandle)
}

//export w2_managedGetPrevBlockRandomSeed
func w2_managedGetPrevBlockRandomSeed(context unsafe.Pointer, resultHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetPrevBlockRandomSeed(resultHandle)
}

//export w2_managedGetReturnData
func w2_managedGetReturnData(context unsafe.Pointer, resultID int32, resultHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetReturnData(resultID, resultHandle)
}

//export w2_managedGetMultiESDTCallValue
func w2_managedGetMultiESDTCallValue(context unsafe.Pointer, multiCallValueHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetMultiESDTCallValue(multiCallValueHandle)
}

//export w2_managedGetBackTransfers
func w2_managedGetBackTransfers(context unsafe.Pointer, esdtTransfersValueHandle int32, egldValueHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetBackTransfers(esdtTransfersValueHandle, egldValueHandle)
}

//export w2_managedGetESDTBalance
func w2_managedGetESDTBalance(context unsafe.Pointer, addressHandle int32, tokenIDHandle int32, nonce int64, valueHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetESDTBalance(addressHandle, tokenIDHandle, nonce, valueHandle)
}

//export w2_managedGetESDTTokenData
func w2_managedGetESDTTokenData(context unsafe.Pointer, addressHandle int32, tokenIDHandle int32, nonce int64, valueHandle int32, propertiesHandle int32, hashHandle int32, nameHandle int32, attributesHandle int32, creatorHandle int32, royaltiesHandle int32, urisHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetESDTTokenData(addressHandle, tokenIDHandle, nonce, valueHandle, propertiesHandle, hashHandle, nameHandle, attributesHandle, creatorHandle, royaltiesHandle, urisHandle)
}

//export w2_managedAsyncCall
func w2_managedAsyncCall(context unsafe.Pointer, destHandle int32, valueHandle int32, functionHandle int32, argumentsHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedAsyncCall(destHandle, valueHandle, functionHandle, argumentsHandle)
}

//export w2_managedCreateAsyncCall
func w2_managedCreateAsyncCall(context unsafe.Pointer, destHandle int32, valueHandle int32, functionHandle int32, argumentsHandle int32, successOffset int32, successLength int32, errorOffset int32, errorLength int32, gas int64, extraGasForCallback int64, callbackClosureHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedCreateAsyncCall(destHandle, valueHandle, functionHandle, argumentsHandle, executor.MemPtr(successOffset), successLength, executor.MemPtr(errorOffset), errorLength, gas, extraGasForCallback, callbackClosureHandle)
}

//export w2_managedGetCallbackClosure
func w2_managedGetCallbackClosure(context unsafe.Pointer, callbackClosureHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetCallbackClosure(callbackClosureHandle)
}

//export w2_managedUpgradeFromSourceContract
func w2_managedUpgradeFromSourceContract(context unsafe.Pointer, destHandle int32, gas int64, valueHandle int32, addressHandle int32, codeMetadataHandle int32, argumentsHandle int32, resultHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedUpgradeFromSourceContract(destHandle, gas, valueHandle, addressHandle, codeMetadataHandle, argumentsHandle, resultHandle)
}

//export w2_managedUpgradeContract
func w2_managedUpgradeContract(context unsafe.Pointer, destHandle int32, gas int64, valueHandle int32, codeHandle int32, codeMetadataHandle int32, argumentsHandle int32, resultHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedUpgradeContract(destHandle, gas, valueHandle, codeHandle, codeMetadataHandle, argumentsHandle, resultHandle)
}

//export w2_managedDeleteContract
func w2_managedDeleteContract(context unsafe.Pointer, destHandle int32, gasLimit int64, argumentsHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedDeleteContract(destHandle, gasLimit, argumentsHandle)
}

//export w2_managedDeployFromSourceContract
func w2_managedDeployFromSourceContract(context unsafe.Pointer, gas int64, valueHandle int32, addressHandle int32, codeMetadataHandle int32, argumentsHandle int32, resultAddressHandle int32, resultHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedDeployFromSourceContract(gas, valueHandle, addressHandle, codeMetadataHandle, argumentsHandle, resultAddressHandle, resultHandle)
}

//export w2_managedCreateContract
func w2_managedCreateContract(context unsafe.Pointer, gas int64, valueHandle int32, codeHandle int32, codeMetadataHandle int32, argumentsHandle int32, resultAddressHandle int32, resultHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedCreateContract(gas, valueHandle, codeHandle, codeMetadataHandle, argumentsHandle, resultAddressHandle, resultHandle)
}

//export w2_managedExecuteReadOnly
func w2_managedExecuteReadOnly(context unsafe.Pointer, gas int64, addressHandle int32, functionHandle int32, argumentsHandle int32, resultHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedExecuteReadOnly(gas, addressHandle, functionHandle, argumentsHandle, resultHandle)
}

//export w2_managedExecuteOnSameContext
func w2_managedExecuteOnSameContext(context unsafe.Pointer, gas int64, addressHandle int32, valueHandle int32, functionHandle int32, argumentsHandle int32, resultHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedExecuteOnSameContext(gas, addressHandle, valueHandle, functionHandle, argumentsHandle, resultHandle)
}

//export w2_managedExecuteOnDestContext
func w2_managedExecuteOnDestContext(context unsafe.Pointer, gas int64, addressHandle int32, valueHandle int32, functionHandle int32, argumentsHandle int32, resultHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedExecuteOnDestContext(gas, addressHandle, valueHandle, functionHandle, argumentsHandle, resultHandle)
}

//export w2_managedMultiTransferESDTNFTExecute
func w2_managedMultiTransferESDTNFTExecute(context unsafe.Pointer, dstHandle int32, tokenTransfersHandle int32, gasLimit int64, functionHandle int32, argumentsHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedMultiTransferESDTNFTExecute(dstHandle, tokenTransfersHandle, gasLimit, functionHandle, argumentsHandle)
}

//export w2_managedMultiTransferESDTNFTExecuteByUser
func w2_managedMultiTransferESDTNFTExecuteByUser(context unsafe.Pointer, userHandle int32, dstHandle int32, tokenTransfersHandle int32, gasLimit int64, functionHandle int32, argumentsHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedMultiTransferESDTNFTExecuteByUser(userHandle, dstHandle, tokenTransfersHandle, gasLimit, functionHandle, argumentsHandle)
}

//export w2_managedTransferValueExecute
func w2_managedTransferValueExecute(context unsafe.Pointer, dstHandle int32, valueHandle int32, gasLimit int64, functionHandle int32, argumentsHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedTransferValueExecute(dstHandle, valueHandle, gasLimit, functionHandle, argumentsHandle)
}

//export w2_managedIsESDTFrozen
func w2_managedIsESDTFrozen(context unsafe.Pointer, addressHandle int32, tokenIDHandle int32, nonce int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedIsESDTFrozen(addressHandle, tokenIDHandle, nonce)
}

//export w2_managedIsESDTLimitedTransfer
func w2_managedIsESDTLimitedTransfer(context unsafe.Pointer, tokenIDHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedIsESDTLimitedTransfer(tokenIDHandle)
}

//export w2_managedIsESDTPaused
func w2_managedIsESDTPaused(context unsafe.Pointer, tokenIDHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedIsESDTPaused(tokenIDHandle)
}

//export w2_managedBufferToHex
func w2_managedBufferToHex(context unsafe.Pointer, sourceHandle int32, destHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedBufferToHex(sourceHandle, destHandle)
}

//export w2_managedGetCodeMetadata
func w2_managedGetCodeMetadata(context unsafe.Pointer, addressHandle int32, responseHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.ManagedGetCodeMetadata(addressHandle, responseHandle)
}

//export w2_managedIsBuiltinFunction
func w2_managedIsBuiltinFunction(context unsafe.Pointer, functionNameHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedIsBuiltinFunction(functionNameHandle)
}

//export w2_bigFloatNewFromParts
func w2_bigFloatNewFromParts(context unsafe.Pointer, integralPart int32, fractionalPart int32, exponent int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigFloatNewFromParts(integralPart, fractionalPart, exponent)
}

//export w2_bigFloatNewFromFrac
func w2_bigFloatNewFromFrac(context unsafe.Pointer, numerator int64, denominator int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigFloatNewFromFrac(numerator, denominator)
}

//export w2_bigFloatNewFromSci
func w2_bigFloatNewFromSci(context unsafe.Pointer, significand int64, exponent int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigFloatNewFromSci(significand, exponent)
}

//export w2_bigFloatAdd
func w2_bigFloatAdd(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatAdd(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigFloatSub
func w2_bigFloatSub(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatSub(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigFloatMul
func w2_bigFloatMul(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatMul(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigFloatDiv
func w2_bigFloatDiv(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatDiv(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigFloatNeg
func w2_bigFloatNeg(context unsafe.Pointer, destinationHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatNeg(destinationHandle, opHandle)
}

//export w2_bigFloatClone
func w2_bigFloatClone(context unsafe.Pointer, destinationHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatClone(destinationHandle, opHandle)
}

//export w2_bigFloatCmp
func w2_bigFloatCmp(context unsafe.Pointer, op1Handle int32, op2Handle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigFloatCmp(op1Handle, op2Handle)
}

//export w2_bigFloatAbs
func w2_bigFloatAbs(context unsafe.Pointer, destinationHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatAbs(destinationHandle, opHandle)
}

//export w2_bigFloatSign
func w2_bigFloatSign(context unsafe.Pointer, opHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigFloatSign(opHandle)
}

//export w2_bigFloatSqrt
func w2_bigFloatSqrt(context unsafe.Pointer, destinationHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatSqrt(destinationHandle, opHandle)
}

//export w2_bigFloatPow
func w2_bigFloatPow(context unsafe.Pointer, destinationHandle int32, opHandle int32, exponent int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatPow(destinationHandle, opHandle, exponent)
}

//export w2_bigFloatFloor
func w2_bigFloatFloor(context unsafe.Pointer, destBigIntHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatFloor(destBigIntHandle, opHandle)
}

//export w2_bigFloatCeil
func w2_bigFloatCeil(context unsafe.Pointer, destBigIntHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatCeil(destBigIntHandle, opHandle)
}

//export w2_bigFloatTruncate
func w2_bigFloatTruncate(context unsafe.Pointer, destBigIntHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatTruncate(destBigIntHandle, opHandle)
}

//export w2_bigFloatSetInt64
func w2_bigFloatSetInt64(context unsafe.Pointer, destinationHandle int32, value int64) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatSetInt64(destinationHandle, value)
}

//export w2_bigFloatIsInt
func w2_bigFloatIsInt(context unsafe.Pointer, opHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigFloatIsInt(opHandle)
}

//export w2_bigFloatSetBigInt
func w2_bigFloatSetBigInt(context unsafe.Pointer, destinationHandle int32, bigIntHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatSetBigInt(destinationHandle, bigIntHandle)
}

//export w2_bigFloatGetConstPi
func w2_bigFloatGetConstPi(context unsafe.Pointer, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatGetConstPi(destinationHandle)
}

//export w2_bigFloatGetConstE
func w2_bigFloatGetConstE(context unsafe.Pointer, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigFloatGetConstE(destinationHandle)
}

//export w2_bigIntGetUnsignedArgument
func w2_bigIntGetUnsignedArgument(context unsafe.Pointer, id int32, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntGetUnsignedArgument(id, destinationHandle)
}

//export w2_bigIntGetSignedArgument
func w2_bigIntGetSignedArgument(context unsafe.Pointer, id int32, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntGetSignedArgument(id, destinationHandle)
}

//export w2_bigIntStorageStoreUnsigned
func w2_bigIntStorageStoreUnsigned(context unsafe.Pointer, keyOffset int32, keyLength int32, sourceHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntStorageStoreUnsigned(executor.MemPtr(keyOffset), keyLength, sourceHandle)
}

//export w2_bigIntStorageLoadUnsigned
func w2_bigIntStorageLoadUnsigned(context unsafe.Pointer, keyOffset int32, keyLength int32, destinationHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntStorageLoadUnsigned(executor.MemPtr(keyOffset), keyLength, destinationHandle)
}

//export w2_bigIntGetCallValue
func w2_bigIntGetCallValue(context unsafe.Pointer, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntGetCallValue(destinationHandle)
}

//export w2_bigIntGetESDTCallValue
func w2_bigIntGetESDTCallValue(context unsafe.Pointer, destination int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntGetESDTCallValue(destination)
}

//export w2_bigIntGetESDTCallValueByIndex
func w2_bigIntGetESDTCallValueByIndex(context unsafe.Pointer, destinationHandle int32, index int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntGetESDTCallValueByIndex(destinationHandle, index)
}

//export w2_bigIntGetExternalBalance
func w2_bigIntGetExternalBalance(context unsafe.Pointer, addressOffset int32, result int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntGetExternalBalance(executor.MemPtr(addressOffset), result)
}

//export w2_bigIntGetESDTExternalBalance
func w2_bigIntGetESDTExternalBalance(context unsafe.Pointer, addressOffset int32, tokenIDOffset int32, tokenIDLen int32, nonce int64, resultHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntGetESDTExternalBalance(executor.MemPtr(addressOffset), executor.MemPtr(tokenIDOffset), tokenIDLen, nonce, resultHandle)
}

//export w2_bigIntNew
func w2_bigIntNew(context unsafe.Pointer, smallValue int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntNew(smallValue)
}

//export w2_bigIntUnsignedByteLength
func w2_bigIntUnsignedByteLength(context unsafe.Pointer, referenceHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntUnsignedByteLength(referenceHandle)
}

//export w2_bigIntSignedByteLength
func w2_bigIntSignedByteLength(context unsafe.Pointer, referenceHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntSignedByteLength(referenceHandle)
}

//export w2_bigIntGetUnsignedBytes
func w2_bigIntGetUnsignedBytes(context unsafe.Pointer, referenceHandle int32, byteOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntGetUnsignedBytes(referenceHandle, executor.MemPtr(byteOffset))
}

//export w2_bigIntGetSignedBytes
func w2_bigIntGetSignedBytes(context unsafe.Pointer, referenceHandle int32, byteOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntGetSignedBytes(referenceHandle, executor.MemPtr(byteOffset))
}

//export w2_bigIntSetUnsignedBytes
func w2_bigIntSetUnsignedBytes(context unsafe.Pointer, destinationHandle int32, byteOffset int32, byteLength int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntSetUnsignedBytes(destinationHandle, executor.MemPtr(byteOffset), byteLength)
}

//export w2_bigIntSetSignedBytes
func w2_bigIntSetSignedBytes(context unsafe.Pointer, destinationHandle int32, byteOffset int32, byteLength int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntSetSignedBytes(destinationHandle, executor.MemPtr(byteOffset), byteLength)
}

//export w2_bigIntIsInt64
func w2_bigIntIsInt64(context unsafe.Pointer, destinationHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntIsInt64(destinationHandle)
}

//export w2_bigIntGetInt64
func w2_bigIntGetInt64(context unsafe.Pointer, destinationHandle int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntGetInt64(destinationHandle)
}

//export w2_bigIntSetInt64
func w2_bigIntSetInt64(context unsafe.Pointer, destinationHandle int32, value int64) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntSetInt64(destinationHandle, value)
}

//export w2_bigIntAdd
func w2_bigIntAdd(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntAdd(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntSub
func w2_bigIntSub(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntSub(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntMul
func w2_bigIntMul(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntMul(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntTDiv
func w2_bigIntTDiv(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntTDiv(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntTMod
func w2_bigIntTMod(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntTMod(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntEDiv
func w2_bigIntEDiv(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntEDiv(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntEMod
func w2_bigIntEMod(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntEMod(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntSqrt
func w2_bigIntSqrt(context unsafe.Pointer, destinationHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntSqrt(destinationHandle, opHandle)
}

//export w2_bigIntPow
func w2_bigIntPow(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntPow(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntLog2
func w2_bigIntLog2(context unsafe.Pointer, op1Handle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntLog2(op1Handle)
}

//export w2_bigIntAbs
func w2_bigIntAbs(context unsafe.Pointer, destinationHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntAbs(destinationHandle, opHandle)
}

//export w2_bigIntNeg
func w2_bigIntNeg(context unsafe.Pointer, destinationHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntNeg(destinationHandle, opHandle)
}

//export w2_bigIntSign
func w2_bigIntSign(context unsafe.Pointer, opHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntSign(opHandle)
}

//export w2_bigIntCmp
func w2_bigIntCmp(context unsafe.Pointer, op1Handle int32, op2Handle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.BigIntCmp(op1Handle, op2Handle)
}

//export w2_bigIntNot
func w2_bigIntNot(context unsafe.Pointer, destinationHandle int32, opHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntNot(destinationHandle, opHandle)
}

//export w2_bigIntAnd
func w2_bigIntAnd(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntAnd(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntOr
func w2_bigIntOr(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntOr(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntXor
func w2_bigIntXor(context unsafe.Pointer, destinationHandle int32, op1Handle int32, op2Handle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntXor(destinationHandle, op1Handle, op2Handle)
}

//export w2_bigIntShr
func w2_bigIntShr(context unsafe.Pointer, destinationHandle int32, opHandle int32, bits int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntShr(destinationHandle, opHandle, bits)
}

//export w2_bigIntShl
func w2_bigIntShl(context unsafe.Pointer, destinationHandle int32, opHandle int32, bits int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntShl(destinationHandle, opHandle, bits)
}

//export w2_bigIntFinishUnsigned
func w2_bigIntFinishUnsigned(context unsafe.Pointer, referenceHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntFinishUnsigned(referenceHandle)
}

//export w2_bigIntFinishSigned
func w2_bigIntFinishSigned(context unsafe.Pointer, referenceHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntFinishSigned(referenceHandle)
}

//export w2_bigIntToString
func w2_bigIntToString(context unsafe.Pointer, bigIntHandle int32, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.BigIntToString(bigIntHandle, destinationHandle)
}

//export w2_mBufferNew
func w2_mBufferNew(context unsafe.Pointer) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferNew()
}

//export w2_mBufferNewFromBytes
func w2_mBufferNewFromBytes(context unsafe.Pointer, dataOffset int32, dataLength int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferNewFromBytes(executor.MemPtr(dataOffset), dataLength)
}

//export w2_mBufferGetLength
func w2_mBufferGetLength(context unsafe.Pointer, mBufferHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferGetLength(mBufferHandle)
}

//export w2_mBufferGetBytes
func w2_mBufferGetBytes(context unsafe.Pointer, mBufferHandle int32, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferGetBytes(mBufferHandle, executor.MemPtr(resultOffset))
}

//export w2_mBufferGetByteSlice
func w2_mBufferGetByteSlice(context unsafe.Pointer, sourceHandle int32, startingPosition int32, sliceLength int32, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferGetByteSlice(sourceHandle, startingPosition, sliceLength, executor.MemPtr(resultOffset))
}

//export w2_mBufferCopyByteSlice
func w2_mBufferCopyByteSlice(context unsafe.Pointer, sourceHandle int32, startingPosition int32, sliceLength int32, destinationHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferCopyByteSlice(sourceHandle, startingPosition, sliceLength, destinationHandle)
}

//export w2_mBufferEq
func w2_mBufferEq(context unsafe.Pointer, mBufferHandle1 int32, mBufferHandle2 int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferEq(mBufferHandle1, mBufferHandle2)
}

//export w2_mBufferSetBytes
func w2_mBufferSetBytes(context unsafe.Pointer, mBufferHandle int32, dataOffset int32, dataLength int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferSetBytes(mBufferHandle, executor.MemPtr(dataOffset), dataLength)
}

//export w2_mBufferSetByteSlice
func w2_mBufferSetByteSlice(context unsafe.Pointer, mBufferHandle int32, startingPosition int32, dataLength int32, dataOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferSetByteSlice(mBufferHandle, startingPosition, dataLength, executor.MemPtr(dataOffset))
}

//export w2_mBufferAppend
func w2_mBufferAppend(context unsafe.Pointer, accumulatorHandle int32, dataHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferAppend(accumulatorHandle, dataHandle)
}

//export w2_mBufferAppendBytes
func w2_mBufferAppendBytes(context unsafe.Pointer, accumulatorHandle int32, dataOffset int32, dataLength int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferAppendBytes(accumulatorHandle, executor.MemPtr(dataOffset), dataLength)
}

//export w2_mBufferToBigIntUnsigned
func w2_mBufferToBigIntUnsigned(context unsafe.Pointer, mBufferHandle int32, bigIntHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferToBigIntUnsigned(mBufferHandle, bigIntHandle)
}

//export w2_mBufferToBigIntSigned
func w2_mBufferToBigIntSigned(context unsafe.Pointer, mBufferHandle int32, bigIntHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferToBigIntSigned(mBufferHandle, bigIntHandle)
}

//export w2_mBufferFromBigIntUnsigned
func w2_mBufferFromBigIntUnsigned(context unsafe.Pointer, mBufferHandle int32, bigIntHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferFromBigIntUnsigned(mBufferHandle, bigIntHandle)
}

//export w2_mBufferFromBigIntSigned
func w2_mBufferFromBigIntSigned(context unsafe.Pointer, mBufferHandle int32, bigIntHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferFromBigIntSigned(mBufferHandle, bigIntHandle)
}

//export w2_mBufferToBigFloat
func w2_mBufferToBigFloat(context unsafe.Pointer, mBufferHandle int32, bigFloatHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferToBigFloat(mBufferHandle, bigFloatHandle)
}

//export w2_mBufferFromBigFloat
func w2_mBufferFromBigFloat(context unsafe.Pointer, mBufferHandle int32, bigFloatHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferFromBigFloat(mBufferHandle, bigFloatHandle)
}

//export w2_mBufferStorageStore
func w2_mBufferStorageStore(context unsafe.Pointer, keyHandle int32, sourceHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferStorageStore(keyHandle, sourceHandle)
}

//export w2_mBufferStorageLoad
func w2_mBufferStorageLoad(context unsafe.Pointer, keyHandle int32, destinationHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferStorageLoad(keyHandle, destinationHandle)
}

//export w2_mBufferStorageLoadFromAddress
func w2_mBufferStorageLoadFromAddress(context unsafe.Pointer, addressHandle int32, keyHandle int32, destinationHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.MBufferStorageLoadFromAddress(addressHandle, keyHandle, destinationHandle)
}

//export w2_mBufferGetArgument
func w2_mBufferGetArgument(context unsafe.Pointer, id int32, destinationHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferGetArgument(id, destinationHandle)
}

//export w2_mBufferFinish
func w2_mBufferFinish(context unsafe.Pointer, sourceHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferFinish(sourceHandle)
}

//export w2_mBufferSetRandom
func w2_mBufferSetRandom(context unsafe.Pointer, destinationHandle int32, length int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MBufferSetRandom(destinationHandle, length)
}

//export w2_managedMapNew
func w2_managedMapNew(context unsafe.Pointer) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedMapNew()
}

//export w2_managedMapPut
func w2_managedMapPut(context unsafe.Pointer, mMapHandle int32, keyHandle int32, valueHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedMapPut(mMapHandle, keyHandle, valueHandle)
}

//export w2_managedMapGet
func w2_managedMapGet(context unsafe.Pointer, mMapHandle int32, keyHandle int32, outValueHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedMapGet(mMapHandle, keyHandle, outValueHandle)
}

//export w2_managedMapRemove
func w2_managedMapRemove(context unsafe.Pointer, mMapHandle int32, keyHandle int32, outValueHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedMapRemove(mMapHandle, keyHandle, outValueHandle)
}

//export w2_managedMapContains
func w2_managedMapContains(context unsafe.Pointer, mMapHandle int32, keyHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedMapContains(mMapHandle, keyHandle)
}

//export w2_smallIntGetUnsignedArgument
func w2_smallIntGetUnsignedArgument(context unsafe.Pointer, id int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.SmallIntGetUnsignedArgument(id)
}

//export w2_smallIntGetSignedArgument
func w2_smallIntGetSignedArgument(context unsafe.Pointer, id int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.SmallIntGetSignedArgument(id)
}

//export w2_smallIntFinishUnsigned
func w2_smallIntFinishUnsigned(context unsafe.Pointer, value int64) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.SmallIntFinishUnsigned(value)
}

//export w2_smallIntFinishSigned
func w2_smallIntFinishSigned(context unsafe.Pointer, value int64) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.SmallIntFinishSigned(value)
}

//export w2_smallIntStorageStoreUnsigned
func w2_smallIntStorageStoreUnsigned(context unsafe.Pointer, keyOffset int32, keyLength int32, value int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.SmallIntStorageStoreUnsigned(executor.MemPtr(keyOffset), keyLength, value)
}

//export w2_smallIntStorageStoreSigned
func w2_smallIntStorageStoreSigned(context unsafe.Pointer, keyOffset int32, keyLength int32, value int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.SmallIntStorageStoreSigned(executor.MemPtr(keyOffset), keyLength, value)
}

//export w2_smallIntStorageLoadUnsigned
func w2_smallIntStorageLoadUnsigned(context unsafe.Pointer, keyOffset int32, keyLength int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.SmallIntStorageLoadUnsigned(executor.MemPtr(keyOffset), keyLength)
}

//export w2_smallIntStorageLoadSigned
func w2_smallIntStorageLoadSigned(context unsafe.Pointer, keyOffset int32, keyLength int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.SmallIntStorageLoadSigned(executor.MemPtr(keyOffset), keyLength)
}

//export w2_int64getArgument
func w2_int64getArgument(context unsafe.Pointer, id int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.Int64getArgument(id)
}

//export w2_int64finish
func w2_int64finish(context unsafe.Pointer, value int64) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.Int64finish(value)
}

//export w2_int64storageStore
func w2_int64storageStore(context unsafe.Pointer, keyOffset int32, keyLength int32, value int64) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.Int64storageStore(executor.MemPtr(keyOffset), keyLength, value)
}

//export w2_int64storageLoad
func w2_int64storageLoad(context unsafe.Pointer, keyOffset int32, keyLength int32) int64 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.Int64storageLoad(executor.MemPtr(keyOffset), keyLength)
}

//export w2_sha256
func w2_sha256(context unsafe.Pointer, dataOffset int32, length int32, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.Sha256(executor.MemPtr(dataOffset), length, executor.MemPtr(resultOffset))
}

//export w2_managedSha256
func w2_managedSha256(context unsafe.Pointer, inputHandle int32, outputHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedSha256(inputHandle, outputHandle)
}

//export w2_keccak256
func w2_keccak256(context unsafe.Pointer, dataOffset int32, length int32, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.Keccak256(executor.MemPtr(dataOffset), length, executor.MemPtr(resultOffset))
}

//export w2_managedKeccak256
func w2_managedKeccak256(context unsafe.Pointer, inputHandle int32, outputHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedKeccak256(inputHandle, outputHandle)
}

//export w2_ripemd160
func w2_ripemd160(context unsafe.Pointer, dataOffset int32, length int32, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.Ripemd160(executor.MemPtr(dataOffset), length, executor.MemPtr(resultOffset))
}

//export w2_managedRipemd160
func w2_managedRipemd160(context unsafe.Pointer, inputHandle int32, outputHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedRipemd160(inputHandle, outputHandle)
}

//export w2_verifyBLS
func w2_verifyBLS(context unsafe.Pointer, keyOffset int32, messageOffset int32, messageLength int32, sigOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.VerifyBLS(executor.MemPtr(keyOffset), executor.MemPtr(messageOffset), messageLength, executor.MemPtr(sigOffset))
}

//export w2_managedVerifyBLS
func w2_managedVerifyBLS(context unsafe.Pointer, keyHandle int32, messageHandle int32, sigHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedVerifyBLS(keyHandle, messageHandle, sigHandle)
}

//export w2_verifyEd25519
func w2_verifyEd25519(context unsafe.Pointer, keyOffset int32, messageOffset int32, messageLength int32, sigOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.VerifyEd25519(executor.MemPtr(keyOffset), executor.MemPtr(messageOffset), messageLength, executor.MemPtr(sigOffset))
}

//export w2_managedVerifyEd25519
func w2_managedVerifyEd25519(context unsafe.Pointer, keyHandle int32, messageHandle int32, sigHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedVerifyEd25519(keyHandle, messageHandle, sigHandle)
}

//export w2_verifyCustomSecp256k1
func w2_verifyCustomSecp256k1(context unsafe.Pointer, keyOffset int32, keyLength int32, messageOffset int32, messageLength int32, sigOffset int32, hashType int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.VerifyCustomSecp256k1(executor.MemPtr(keyOffset), keyLength, executor.MemPtr(messageOffset), messageLength, executor.MemPtr(sigOffset), hashType)
}

//export w2_managedVerifyCustomSecp256k1
func w2_managedVerifyCustomSecp256k1(context unsafe.Pointer, keyHandle int32, messageHandle int32, sigHandle int32, hashType int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedVerifyCustomSecp256k1(keyHandle, messageHandle, sigHandle, hashType)
}

//export w2_verifySecp256k1
func w2_verifySecp256k1(context unsafe.Pointer, keyOffset int32, keyLength int32, messageOffset int32, messageLength int32, sigOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.VerifySecp256k1(executor.MemPtr(keyOffset), keyLength, executor.MemPtr(messageOffset), messageLength, executor.MemPtr(sigOffset))
}

//export w2_managedVerifySecp256k1
func w2_managedVerifySecp256k1(context unsafe.Pointer, keyHandle int32, messageHandle int32, sigHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedVerifySecp256k1(keyHandle, messageHandle, sigHandle)
}

//export w2_encodeSecp256k1DerSignature
func w2_encodeSecp256k1DerSignature(context unsafe.Pointer, rOffset int32, rLength int32, sOffset int32, sLength int32, sigOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.EncodeSecp256k1DerSignature(executor.MemPtr(rOffset), rLength, executor.MemPtr(sOffset), sLength, executor.MemPtr(sigOffset))
}

//export w2_managedEncodeSecp256k1DerSignature
func w2_managedEncodeSecp256k1DerSignature(context unsafe.Pointer, rHandle int32, sHandle int32, sigHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedEncodeSecp256k1DerSignature(rHandle, sHandle, sigHandle)
}

//export w2_addEC
func w2_addEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, fstPointXHandle int32, fstPointYHandle int32, sndPointXHandle int32, sndPointYHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.AddEC(xResultHandle, yResultHandle, ecHandle, fstPointXHandle, fstPointYHandle, sndPointXHandle, sndPointYHandle)
}

//export w2_doubleEC
func w2_doubleEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, pointXHandle int32, pointYHandle int32) {
	vmHooks := getVMHooksFromContextRawPtr(context)
	vmHooks.DoubleEC(xResultHandle, yResultHandle, ecHandle, pointXHandle, pointYHandle)
}

//export w2_isOnCurveEC
func w2_isOnCurveEC(context unsafe.Pointer, ecHandle int32, pointXHandle int32, pointYHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.IsOnCurveEC(ecHandle, pointXHandle, pointYHandle)
}

//export w2_scalarBaseMultEC
func w2_scalarBaseMultEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, dataOffset int32, length int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ScalarBaseMultEC(xResultHandle, yResultHandle, ecHandle, executor.MemPtr(dataOffset), length)
}

//export w2_managedScalarBaseMultEC
func w2_managedScalarBaseMultEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, dataHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedScalarBaseMultEC(xResultHandle, yResultHandle, ecHandle, dataHandle)
}

//export w2_scalarMultEC
func w2_scalarMultEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, pointXHandle int32, pointYHandle int32, dataOffset int32, length int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ScalarMultEC(xResultHandle, yResultHandle, ecHandle, pointXHandle, pointYHandle, executor.MemPtr(dataOffset), length)
}

//export w2_managedScalarMultEC
func w2_managedScalarMultEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, pointXHandle int32, pointYHandle int32, dataHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedScalarMultEC(xResultHandle, yResultHandle, ecHandle, pointXHandle, pointYHandle, dataHandle)
}

//export w2_marshalEC
func w2_marshalEC(context unsafe.Pointer, xPairHandle int32, yPairHandle int32, ecHandle int32, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MarshalEC(xPairHandle, yPairHandle, ecHandle, executor.MemPtr(resultOffset))
}

//export w2_managedMarshalEC
func w2_managedMarshalEC(context unsafe.Pointer, xPairHandle int32, yPairHandle int32, ecHandle int32, resultHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedMarshalEC(xPairHandle, yPairHandle, ecHandle, resultHandle)
}

//export w2_marshalCompressedEC
func w2_marshalCompressedEC(context unsafe.Pointer, xPairHandle int32, yPairHandle int32, ecHandle int32, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.MarshalCompressedEC(xPairHandle, yPairHandle, ecHandle, executor.MemPtr(resultOffset))
}

//export w2_managedMarshalCompressedEC
func w2_managedMarshalCompressedEC(context unsafe.Pointer, xPairHandle int32, yPairHandle int32, ecHandle int32, resultHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedMarshalCompressedEC(xPairHandle, yPairHandle, ecHandle, resultHandle)
}

//export w2_unmarshalEC
func w2_unmarshalEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, dataOffset int32, length int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.UnmarshalEC(xResultHandle, yResultHandle, ecHandle, executor.MemPtr(dataOffset), length)
}

//export w2_managedUnmarshalEC
func w2_managedUnmarshalEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, dataHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedUnmarshalEC(xResultHandle, yResultHandle, ecHandle, dataHandle)
}

//export w2_unmarshalCompressedEC
func w2_unmarshalCompressedEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, dataOffset int32, length int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.UnmarshalCompressedEC(xResultHandle, yResultHandle, ecHandle, executor.MemPtr(dataOffset), length)
}

//export w2_managedUnmarshalCompressedEC
func w2_managedUnmarshalCompressedEC(context unsafe.Pointer, xResultHandle int32, yResultHandle int32, ecHandle int32, dataHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedUnmarshalCompressedEC(xResultHandle, yResultHandle, ecHandle, dataHandle)
}

//export w2_generateKeyEC
func w2_generateKeyEC(context unsafe.Pointer, xPubKeyHandle int32, yPubKeyHandle int32, ecHandle int32, resultOffset int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GenerateKeyEC(xPubKeyHandle, yPubKeyHandle, ecHandle, executor.MemPtr(resultOffset))
}

//export w2_managedGenerateKeyEC
func w2_managedGenerateKeyEC(context unsafe.Pointer, xPubKeyHandle int32, yPubKeyHandle int32, ecHandle int32, resultHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedGenerateKeyEC(xPubKeyHandle, yPubKeyHandle, ecHandle, resultHandle)
}

//export w2_createEC
func w2_createEC(context unsafe.Pointer, dataOffset int32, dataLength int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.CreateEC(executor.MemPtr(dataOffset), dataLength)
}

//export w2_managedCreateEC
func w2_managedCreateEC(context unsafe.Pointer, dataHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedCreateEC(dataHandle)
}

//export w2_getCurveLengthEC
func w2_getCurveLengthEC(context unsafe.Pointer, ecHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetCurveLengthEC(ecHandle)
}

//export w2_getPrivKeyByteLengthEC
func w2_getPrivKeyByteLengthEC(context unsafe.Pointer, ecHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.GetPrivKeyByteLengthEC(ecHandle)
}

//export w2_ellipticCurveGetValues
func w2_ellipticCurveGetValues(context unsafe.Pointer, ecHandle int32, fieldOrderHandle int32, basePointOrderHandle int32, eqConstantHandle int32, xBasePointHandle int32, yBasePointHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.EllipticCurveGetValues(ecHandle, fieldOrderHandle, basePointOrderHandle, eqConstantHandle, xBasePointHandle, yBasePointHandle)
}

//export w2_managedVerifySecp256r1
func w2_managedVerifySecp256r1(context unsafe.Pointer, keyHandle int32, messageHandle int32, sigHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedVerifySecp256r1(keyHandle, messageHandle, sigHandle)
}

//export w2_managedVerifyBLSSignatureShare
func w2_managedVerifyBLSSignatureShare(context unsafe.Pointer, keyHandle int32, messageHandle int32, sigHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedVerifyBLSSignatureShare(keyHandle, messageHandle, sigHandle)
}

//export w2_managedVerifyBLSAggregatedSignature
func w2_managedVerifyBLSAggregatedSignature(context unsafe.Pointer, keyHandle int32, messageHandle int32, sigHandle int32) int32 {
	vmHooks := getVMHooksFromContextRawPtr(context)
	return vmHooks.ManagedVerifyBLSAggregatedSignature(keyHandle, messageHandle, sigHandle)
}
