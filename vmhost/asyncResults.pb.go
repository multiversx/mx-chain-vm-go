// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: asyncResults.proto

package vmhost

import (
	"fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SerializableAsyncCallResults struct {
	ReturnData [][]byte `protobuf:"bytes,1,rep,name=ReturnData,proto3" json:"ReturnData,omitempty"`
	ReturnCode uint32   `protobuf:"varint,3,opt,name=ReturnCode,proto3" json:"ReturnCode,omitempty"`
}

func (m *SerializableAsyncCallResults) Reset()      { *m = SerializableAsyncCallResults{} }
func (*SerializableAsyncCallResults) ProtoMessage() {}
func (*SerializableAsyncCallResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b2c3d4e5f6g7h8, []int{0}
}
func (m *SerializableAsyncCallResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return nil
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableAsyncCallResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableAsyncCallResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return nil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return nil
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return nil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnData = append(m.ReturnData, make([]byte, postIndex-iNdEx))
			copy(m.ReturnData[len(m.ReturnData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			m.ReturnCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return nil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAsyncResults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return nil
			}
			if (iNdEx + skippy) < 0 {
				return nil
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializableAsyncCallResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableAsyncCallResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableAsyncCallResults.Merge(m, src)
}
func (m *SerializableAsyncCallResults) XXX_Size() int {
	return m.Size()
}
func (m *SerializableAsyncCallResults) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableAsyncCallResults.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableAsyncCallResults proto.InternalMessageInfo

func (m *SerializableAsyncCallResults) GetReturnData() [][]byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

func (m *SerializableAsyncCallResults) GetReturnCode() uint32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

type SerializableFinishedAsyncCall struct {
	InitialCall *SerializableAsyncCallResults `protobuf:"bytes,1,opt,name=InitialCall,proto3" json:"InitialCall,omitempty"`
	Callback    *SerializableAsyncCallResults `protobuf:"bytes,2,opt,name=Callback,proto3" json:"Callback,omitempty"`
}

func (m *SerializableFinishedAsyncCall) Reset()      { *m = SerializableFinishedAsyncCall{} }
func (*SerializableFinishedAsyncCall) ProtoMessage() {}
func (*SerializableFinishedAsyncCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b2c3d4e5f6g7h8, []int{1}
}
func (m *SerializableFinishedAsyncCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return nil
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableFinishedAsyncCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableFinishedAsyncCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return nil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return nil
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return nil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitialCall == nil {
				m.InitialCall = &SerializableAsyncCallResults{}
			}
			if err := m.InitialCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return nil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return nil
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return nil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Callback == nil {
				m.Callback = &SerializableAsyncCallResults{}
			}
			if err := m.Callback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsyncResults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return nil
			}
			if (iNdEx + skippy) < 0 {
				return nil
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipAsyncResults(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, nil
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, nil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, nil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, nil
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, nil
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, nil
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}
func (m *SerializableFinishedAsyncCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableFinishedAsyncCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableFinishedAsyncCall.Merge(m, src)
}
func (m *SerializableFinishedAsyncCall) XXX_Size() int {
	return m.Size()
}
func (m *SerializableFinishedAsyncCall) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableFinishedAsyncCall.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableFinishedAsyncCall proto.InternalMessageInfo

func (m *SerializableFinishedAsyncCall) GetInitialCall() *SerializableAsyncCallResults {
	if m != nil {
		return m.InitialCall
	}
	return nil
}

func (m *SerializableFinishedAsyncCall) GetCallback() *SerializableAsyncCallResults {
	if m != nil {
		return m.Callback
	}
	return nil
}

func init() {
	proto.RegisterType((*SerializableAsyncCallResults)(nil), "vmhost.SerializableAsyncCallResults")
	proto.RegisterType((*SerializableFinishedAsyncCall)(nil), "vmhost.SerializableFinishedAsyncCall")
}

func init() { proto.RegisterFile("asyncResults.proto", fileDescriptor_a1b2c3d4e5f6g7h8) }

var fileDescriptor_a1b2c3d4e5f6g7h8 = []byte{}

func (m *SerializableAsyncCallResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableAsyncCallResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableAsyncCallResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReturnCode != 0 {
		i = encodeVarintAsyncResults(dAtA, i, uint64(m.ReturnCode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReturnData) > 0 {
		for iNdEx := len(m.ReturnData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReturnData[iNdEx])
			copy(dAtA[i:], m.ReturnData[iNdEx])
			i = encodeVarintAsyncResults(dAtA, i, uint64(len(m.ReturnData[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SerializableFinishedAsyncCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableFinishedAsyncCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableFinishedAsyncCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Callback != nil {
		{
			size, err := m.Callback.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsyncResults(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InitialCall != nil {
		{
			size, err := m.InitialCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsyncResults(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAsyncResults(dAtA []byte, offset int, v uint64) int {
	offset -= sovAsyncResults(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SerializableAsyncCallResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReturnData) > 0 {
		for _, b := range m.ReturnData {
			l = len(b)
			n += 1 + l + sovAsyncResults(uint64(l))
		}
	}
	if m.ReturnCode != 0 {
		n += 1 + sovAsyncResults(uint64(m.ReturnCode))
	}
	return n
}

func (m *SerializableFinishedAsyncCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitialCall != nil {
		l = m.InitialCall.Size()
		n += 1 + l + sovAsyncResults(uint64(l))
	}
	if m.Callback != nil {
		l = m.Callback.Size()
		n += 1 + l + sovAsyncResults(uint64(l))
	}
	return n
}

func sovAsyncResults(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAsyncResults(x uint64) (n int) {
	return sovAsyncResults(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SerializableAsyncCallResults) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializableAsyncCallResults{`,
		`ReturnData:` + fmt.Sprintf("%v", this.ReturnData) + `,`,
		`ReturnCode:` + fmt.Sprintf("%v", this.ReturnCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializableFinishedAsyncCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializableFinishedAsyncCall{`,
		`InitialCall:` + strings.Replace(this.InitialCall.String(), "SerializableAsyncCallResults", "SerializableAsyncCallResults", 1) + `,`,
		`Callback:` + strings.Replace(this.Callback.String(), "SerializableAsyncCallResults", "SerializableAsyncCallResults", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAsyncResults(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
// ... (the rest of the file is boilerplate that I will omit for brevity)
