package vmhooksgenerate

import (
	"fmt"
)

// WriteRustWasmerImports autogenerate data in the provided file
func WriteRustWasmerImports(out *eiGenWriter, eiMetadata *EIMetadata) {
	autoGeneratedHeader(out)
	out.WriteString(`
#![allow(clippy::too_many_arguments)]

use wasmer::{imports, Function, ImportObject, Store};

use crate::wasmer_vm_hooks::VMHooksWrapper;

`)

	for _, funcMetadata := range eiMetadata.AllFunctions {
		out.WriteString("#[rustfmt::skip]\n")
		out.WriteString(fmt.Sprintf(
			"fn %s%s",
			wasmerImportAdapterFunctionName(funcMetadata.Name),
			writeRustFnDeclarationArguments(
				"env: &VMHooksWrapper",
				funcMetadata,
				rustWasmerType,
				rustVMHooksLegacyReturnType,
			),
		))

		out.WriteString(" {\n")
		out.WriteString(fmt.Sprintf("    env.vm_hooks.%s(", snakeCase(funcMetadata.Name)))

		for i, arg := range funcMetadata.Arguments {
			if i > 0 {
				out.WriteString(", ")
			}
			out.WriteString(rustWasmerProdConvertArg(arg))
		}

		out.WriteString(")\n}\n\n")
	}

	out.WriteString(`pub fn generate_import_object(store: &Store, env: &VMHooksWrapper) -> ImportObject {
    imports! {
        "env" => {
`)

	for _, funcMetadata := range eiMetadata.AllFunctions {
		out.WriteString(fmt.Sprintf(
			"            \"%s\" => Function::new_native_with_env(store, env.clone(), %s),\n",
			lowerInitial(funcMetadata.Name),
			wasmerImportAdapterFunctionName(funcMetadata.Name),
		))
	}

	out.WriteString(`
        }
    }
}
`)

}
