package vmhooksgenerate

import (
	"fmt"
	"strings"
)

func WriteRustCapiVMHooks(out *eiGenWriter, eiMetadata *EIMetadata) {
	autoGeneratedHeader(out)
	out.WriteString(`
use std::ffi::c_void;

use multiversx_chain_vm_executor::{MemLength, MemPtr};

use crate::capi_vm_hook_pointers::vm_exec_vm_hook_c_func_pointers;

#[derive(Debug)]
pub struct CapiVMHooks {
    pub vm_hooks_ptr: *mut c_void,
    pub c_func_pointers_ptr: vm_exec_vm_hook_c_func_pointers,
}

impl CapiVMHooks {
    pub fn new(c_func_pointers_ptr: vm_exec_vm_hook_c_func_pointers) -> Self {
        Self {
            vm_hooks_ptr: std::ptr::null_mut(),
            c_func_pointers_ptr,
        }
    }

    fn convert_mem_ptr(&self, mem_ptr: MemPtr) -> i32 {
        mem_ptr as i32
    }

    fn convert_mem_length(&self, mem_length: MemLength) -> i32 {
        mem_length as i32
    }
}

#[rustfmt::skip]
impl multiversx_chain_vm_executor::VMHooksLegacy for CapiVMHooks {
    fn set_vm_hooks_ptr(&mut self, vm_hooks_ptr: *mut c_void) {
        self.vm_hooks_ptr = vm_hooks_ptr;
    }
`)

	for _, funcMetadata := range eiMetadata.AllFunctions {
		out.WriteString(fmt.Sprintf(
			"\n    fn %s%s {\n",
			snakeCase(funcMetadata.Name),
			writeRustFnDeclarationArguments(
				"&self",
				funcMetadata,
				rustVMHooksType,
				rustVMHooksLegacyReturnType,
			),
		))

		out.WriteString(fmt.Sprintf(
			"        (self.c_func_pointers_ptr.%s)%s\n",
			cgoFuncPointerFieldName(funcMetadata),
			writeRustFnCallArguments("self.vm_hooks_ptr", funcMetadata),
		))

		out.WriteString("    }\n")
	}

	out.WriteString(`}
`)
}

func writeRustFnCallArguments(firstArgs string, funcMetadata *EIFunction) string {
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("(%s", firstArgs))
	for _, arg := range funcMetadata.Arguments {
		sb.WriteString(fmt.Sprintf(", %s", rustCapiConvertArg(arg)))
	}
	sb.WriteString(")")
	return sb.String()
}
