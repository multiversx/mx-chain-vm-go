package vmhooksgenerate

import (
	"fmt"
)

// WriteRustVMHooksLegacyTrait autogenerate data in the provided file
func WriteRustVMHooksLegacyTrait(out *eiGenWriter, eiMetadata *EIMetadata) {
	autoGeneratedHeader(out)
	out.WriteString(`
use std::ffi::c_void;

use crate::{MemLength, MemPtr};

#[rustfmt::skip]
#[allow(clippy::too_many_arguments)]
pub trait VMHooksLegacy: core::fmt::Debug {
    fn set_vm_hooks_ptr(&mut self, vm_hooks_ptr: *mut c_void);

`)

	for _, funcMetadata := range eiMetadata.AllFunctions {
		out.WriteString(fmt.Sprintf(
			"    fn %s%s;\n",
			snakeCase(funcMetadata.Name),
			writeRustFnDeclarationArguments(
				"&self",
				funcMetadata,
				rustVMHooksType,
				rustVMHooksLegacyReturnType,
			),
		))
	}

	out.WriteString(`}

/// Dummy implementation for VMHooks. Can be used as placeholder, or in tests.
#[derive(Debug)]
pub struct VMHooksLegacyDefault;

#[allow(unused)]
#[rustfmt::skip]
impl VMHooksLegacy for VMHooksLegacyDefault {
    fn set_vm_hooks_ptr(&mut self, _vm_hooks_ptr: *mut c_void) {
    }

`)

	for i, funcMetadata := range eiMetadata.AllFunctions {
		if i > 0 {
			out.WriteString("\n")
		}

		out.WriteString(fmt.Sprintf(
			"    fn %s%s {\n",
			snakeCase(funcMetadata.Name),
			writeRustFnDeclarationArguments(
				"&self",
				funcMetadata,
				rustVMHooksType,
				rustVMHooksLegacyReturnType,
			),
		))

		out.WriteString(fmt.Sprintf(
			"        println!(\"Called: %s\");\n",
			snakeCase(funcMetadata.Name),
		))

		if funcMetadata.Result != nil {
			out.WriteString("        0\n")
		}

		out.WriteString("    }\n")
	}

	out.WriteString("}\n")

}
