package vmhooksgenerate

import (
	"fmt"
)

// WriteRustVMHooksLegacyTrait autogenerate data in the provided file
func WriteRustVMHooksLegacyAdapter(out *eiGenWriter, eiMetadata *EIMetadata) {
	autoGeneratedHeader(out)
	out.WriteString(`
use std::{cell::RefCell, ffi::c_void};

use crate::{MemLength, MemPtr, VMHooks, VMHooksEarlyExit, VMHooksLegacy};

/// Allows VM hooks handler to define an early exit method to be used by the VMHooksLegacyAdapter.
pub trait VMHooksSetEarlyExit: VMHooks {
    fn set_early_exit(&self, early_exit: VMHooksEarlyExit);
}

/// Allow conversion from the new VMHooks to the old.
///
/// Will eventually be removed, once everything gets migrated.
#[derive(Debug)]
pub struct VMHooksLegacyAdapter<VH: VMHooksSetEarlyExit> {
    inner_cell: RefCell<VH>,
}

impl<VH: VMHooksSetEarlyExit> VMHooksLegacyAdapter<VH> {
    pub fn new(inner: VH) -> Self {
        VMHooksLegacyAdapter {
            inner_cell: RefCell::new(inner),
        }
    }

    fn adapt_vm_hooks<F, R>(&self, f: F) -> R
    where
        R: Default,
        F: FnOnce(&mut dyn VMHooks) -> Result<R, VMHooksEarlyExit>,
    {
        let mut vm_hooks = self.inner_cell.borrow_mut();
        let result = f(&mut *vm_hooks);
        result.unwrap_or_else(|early_exit| {
            vm_hooks.set_early_exit(early_exit);
            R::default()
        })
    }
}

#[rustfmt::skip]
impl<VH: VMHooksSetEarlyExit> VMHooksLegacy for VMHooksLegacyAdapter<VH> {
    fn set_vm_hooks_ptr(&mut self, _vm_hooks_ptr: *mut c_void) {
    }
`)

	for _, funcMetadata := range eiMetadata.AllFunctions {
		out.WriteString(fmt.Sprintf(
			"\n    fn %s%s {\n",
			snakeCase(funcMetadata.Name),
			writeRustFnDeclarationArguments(
				"&self",
				funcMetadata,
				rustVMHooksType,
				rustVMHooksLegacyReturnType,
			),
		))

		out.WriteString(fmt.Sprintf(
			"        self.adapt_vm_hooks(|inner| VMHooks::%s(inner",
			snakeCase(funcMetadata.Name),
		))
		for _, arg := range funcMetadata.Arguments {
			out.WriteString(", ")
			out.WriteString(snakeCase((arg.Name)))
		}
		out.WriteString("))\n")
		out.WriteString("    }\n")
	}

	out.WriteString("}\n")

}
