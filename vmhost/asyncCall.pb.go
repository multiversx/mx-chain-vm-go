// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: asyncCall.proto

package vmhost

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SerializableAsyncCallStatus int32

const (
	SerializableAsyncCallPending  SerializableAsyncCallStatus = 0
	SerializableAsyncCallResolved SerializableAsyncCallStatus = 1
	SerializableAsyncCallRejected SerializableAsyncCallStatus = 2
)

var SerializableAsyncCallStatus_name = map[int32]string{
	0: "SerializableAsyncCallPending",
	1: "SerializableAsyncCallResolved",
	2: "SerializableAsyncCallRejected",
}

var SerializableAsyncCallStatus_value = map[string]int32{
	"SerializableAsyncCallPending":  0,
	"SerializableAsyncCallResolved": 1,
	"SerializableAsyncCallRejected": 2,
}

func (SerializableAsyncCallStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0e9b586d6e1f667, []int{0}
}

type SerializableAsyncCallExecutionMode int32

const (
	SerializableSyncExecution              SerializableAsyncCallExecutionMode = 0
	SerializableAsyncBuiltinFuncIntraShard SerializableAsyncCallExecutionMode = 1
	SerializableAsyncBuiltinFuncCrossShard SerializableAsyncCallExecutionMode = 2
	SerializableAsyncUnknown               SerializableAsyncCallExecutionMode = 3
)

var SerializableAsyncCallExecutionMode_name = map[int32]string{
	0: "SerializableSyncExecution",
	1: "SerializableAsyncBuiltinFuncIntraShard",
	2: "SerializableAsyncBuiltinFuncCrossShard",
	3: "SerializableAsyncUnknown",
}

var SerializableAsyncCallExecutionMode_value = map[string]int32{
	"SerializableSyncExecution":              0,
	"SerializableAsyncBuiltinFuncIntraShard": 1,
	"SerializableAsyncBuiltinFuncCrossShard": 2,
	"SerializableAsyncUnknown":               3,
}

func (SerializableAsyncCallExecutionMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0e9b586d6e1f667, []int{1}
}

type SerializableAsyncCall struct {
	CallID                   []byte                             `protobuf:"bytes,1,opt,name=CallID,proto3" json:"CallID,omitempty"`
	Status                   SerializableAsyncCallStatus        `protobuf:"varint,2,opt,name=Status,proto3,enum=vmhost.SerializableAsyncCallStatus" json:"Status,omitempty"`
	ExecutionMode            SerializableAsyncCallExecutionMode `protobuf:"varint,3,opt,name=ExecutionMode,proto3,enum=vmhost.SerializableAsyncCallExecutionMode" json:"ExecutionMode,omitempty"`
	Destination              []byte                             `protobuf:"bytes,5,opt,name=Destination,proto3" json:"Destination,omitempty"`
	Data                     []byte                             `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	GasLimit                 uint64                             `protobuf:"varint,7,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	GasLocked                uint64                             `protobuf:"varint,8,opt,name=GasLocked,proto3" json:"GasLocked,omitempty"`
	ValueBytes               []byte                             `protobuf:"bytes,9,opt,name=ValueBytes,proto3" json:"ValueBytes,omitempty"`
	SuccessCallback          string                             `protobuf:"bytes,10,opt,name=SuccessCallback,proto3" json:"SuccessCallback,omitempty"`
	ErrorCallback            string                             `protobuf:"bytes,11,opt,name=ErrorCallback,proto3" json:"ErrorCallback,omitempty"`
	CallbackClosure          []byte                             `protobuf:"bytes,12,opt,name=CallbackClosure,proto3" json:"CallbackClosure,omitempty"`
	IsAsyncV3                bool                               `protobuf:"varint,13,opt,name=IsAsyncV3,proto3" json:"IsAsyncV3,omitempty"`
	HasPendingCallback       bool                               `protobuf:"varint,14,opt,name=HasPendingCallback,proto3" json:"HasPendingCallback,omitempty"`
	PendingCallbackGasLocked uint64                             `protobuf:"varint,15,opt,name=PendingCallbackGasLocked,proto3" json:"PendingCallbackGasLocked,omitempty"`
}

func (m *SerializableAsyncCall) Reset()      { *m = SerializableAsyncCall{} }
func (*SerializableAsyncCall) ProtoMessage() {}
func (*SerializableAsyncCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0e9b586d6e1f667, []int{0}
}
func (m *SerializableAsyncCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializableAsyncCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableAsyncCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableAsyncCall.Merge(m, src)
}
func (m *SerializableAsyncCall) XXX_Size() int {
	return m.Size()
}
func (m *SerializableAsyncCall) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableAsyncCall.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableAsyncCall proto.InternalMessageInfo

func (m *SerializableAsyncCall) GetCallID() []byte {
	if m != nil {
		return m.CallID
	}
	return nil
}

func (m *SerializableAsyncCall) GetStatus() SerializableAsyncCallStatus {
	if m != nil {
		return m.Status
	}
	return SerializableAsyncCallPending
}

func (m *SerializableAsyncCall) GetExecutionMode() SerializableAsyncCallExecutionMode {
	if m != nil {
		return m.ExecutionMode
	}
	return SerializableSyncExecution
}

func (m *SerializableAsyncCall) GetDestination() []byte {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *SerializableAsyncCall) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SerializableAsyncCall) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *SerializableAsyncCall) GetGasLocked() uint64 {
	if m != nil {
		return m.GasLocked
	}
	return 0
}

func (m *SerializableAsyncCall) GetValueBytes() []byte {
	if m != nil {
		return m.ValueBytes
	}
	return nil
}

func (m *SerializableAsyncCall) GetSuccessCallback() string {
	if m != nil {
		return m.SuccessCallback
	}
	return ""
}

func (m *SerializableAsyncCall) GetErrorCallback() string {
	if m != nil {
		return m.ErrorCallback
	}
	return ""
}

func (m *SerializableAsyncCall) GetCallbackClosure() []byte {
	if m != nil {
		return m.CallbackClosure
	}
	return nil
}

func (m *SerializableAsyncCall) GetIsAsyncV3() bool {
	if m != nil {
		return m.IsAsyncV3
	}
	return false
}

func (m *SerializableAsyncCall) GetHasPendingCallback() bool {
	if m != nil {
		return m.HasPendingCallback
	}
	return false
}

func (m *SerializableAsyncCall) GetPendingCallbackGasLocked() uint64 {
	if m != nil {
		return m.PendingCallbackGasLocked
	}
	return 0
}

type SerializableAsyncCallGroup struct {
	Callback     string                   `protobuf:"bytes,1,opt,name=Callback,proto3" json:"Callback,omitempty"`
	GasLocked    uint64                   `protobuf:"varint,2,opt,name=GasLocked,proto3" json:"GasLocked,omitempty"`
	CallbackData []byte                   `protobuf:"bytes,3,opt,name=CallbackData,proto3" json:"CallbackData,omitempty"`
	Identifier   string                   `protobuf:"bytes,4,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	AsyncCalls   []*SerializableAsyncCall `protobuf:"bytes,5,rep,name=AsyncCalls,proto3" json:"AsyncCalls,omitempty"`
}

func (m *SerializableAsyncCallGroup) Reset()      { *m = SerializableAsyncCallGroup{} }
func (*SerializableAsyncCallGroup) ProtoMessage() {}
func (*SerializableAsyncCallGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0e9b586d6e1f667, []int{1}
}
func (m *SerializableAsyncCallGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializableAsyncCallGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableAsyncCallGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableAsyncCallGroup.Merge(m, src)
}
func (m *SerializableAsyncCallGroup) XXX_Size() int {
	return m.Size()
}
func (m *SerializableAsyncCallGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableAsyncCallGroup.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableAsyncCallGroup proto.InternalMessageInfo

func (m *SerializableAsyncCallGroup) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *SerializableAsyncCallGroup) GetGasLocked() uint64 {
	if m != nil {
		return m.GasLocked
	}
	return 0
}

func (m *SerializableAsyncCallGroup) GetCallbackData() []byte {
	if m != nil {
		return m.CallbackData
	}
	return nil
}

func (m *SerializableAsyncCallGroup) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *SerializableAsyncCallGroup) GetAsyncCalls() []*SerializableAsyncCall {
	if m != nil {
		return m.AsyncCalls
	}
	return nil
}

func init() {
	proto.RegisterEnum("vmhost.SerializableAsyncCallStatus", SerializableAsyncCallStatus_name, SerializableAsyncCallStatus_value)
	proto.RegisterEnum("vmhost.SerializableAsyncCallExecutionMode", SerializableAsyncCallExecutionMode_name, SerializableAsyncCallExecutionMode_value)
	proto.RegisterType((*SerializableAsyncCall)(nil), "vmhost.SerializableAsyncCall")
	proto.RegisterType((*SerializableAsyncCallGroup)(nil), "vmhost.SerializableAsyncCallGroup")
}

func init() { proto.RegisterFile("asyncCall.proto", fileDescriptor_a0e9b586d6e1f667) }

var fileDescriptor_a0e9b586d6e1f667 = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0x1d, 0x27, 0x69, 0xbe, 0xf6, 0xf6, 0x2f, 0xb2, 0xf4, 0x21, 0x53, 0x5a, 0x6b, 0x08, 0x08,
	0x8d, 0x22, 0x91, 0x4a, 0xed, 0x0e, 0x84, 0x04, 0xfd, 0xa1, 0x44, 0x02, 0xa9, 0x9a, 0x88, 0x2e,
	0xd8, 0x39, 0x33, 0x6e, 0x6a, 0x3a, 0xb5, 0xab, 0xb1, 0xa7, 0x50, 0x56, 0x6c, 0xd8, 0xf3, 0x18,
	0xbc, 0x02, 0x6f, 0xc0, 0xb2, 0x62, 0x55, 0x76, 0x74, 0xb2, 0x61, 0xd9, 0x47, 0x40, 0xe3, 0x24,
	0x93, 0x9f, 0x86, 0x74, 0x95, 0x7b, 0xcf, 0x3d, 0xf7, 0xdc, 0x9b, 0x63, 0x8f, 0x61, 0x99, 0xe9,
	0x73, 0x19, 0x6c, 0xb3, 0x28, 0xaa, 0x9f, 0xc6, 0xca, 0x28, 0x5c, 0x3e, 0x3b, 0x39, 0x52, 0xda,
	0xac, 0x3c, 0x6e, 0x0b, 0x73, 0x94, 0xb4, 0xea, 0x81, 0x3a, 0x59, 0x6f, 0xab, 0xb6, 0x5a, 0xb7,
	0xe5, 0x56, 0x72, 0x68, 0x33, 0x9b, 0xd8, 0xa8, 0xdb, 0x56, 0xfd, 0x59, 0x82, 0xff, 0x9b, 0x3c,
	0x16, 0x2c, 0x12, 0x9f, 0x58, 0x2b, 0xe2, 0x2f, 0xfa, 0xb2, 0xf8, 0x0e, 0x94, 0xb3, 0xdf, 0xc6,
	0x0e, 0x41, 0x2e, 0xf2, 0x16, 0xfc, 0x5e, 0x86, 0x9f, 0x42, 0xb9, 0x69, 0x98, 0x49, 0x34, 0x29,
	0xb8, 0xc8, 0x5b, 0xda, 0x78, 0x50, 0xef, 0x4e, 0xae, 0x4f, 0x94, 0xe9, 0x52, 0xfd, 0x5e, 0x0b,
	0xde, 0x87, 0xc5, 0xdd, 0x8f, 0x3c, 0x48, 0x8c, 0x50, 0xf2, 0x8d, 0x0a, 0x39, 0x29, 0x5a, 0x8d,
	0xda, 0x54, 0x8d, 0x91, 0x0e, 0x7f, 0x54, 0x00, 0xbb, 0x30, 0xbf, 0xc3, 0xb5, 0x11, 0x92, 0x65,
	0x10, 0x99, 0xb1, 0xbb, 0x0e, 0x43, 0x18, 0x43, 0x69, 0x87, 0x19, 0x46, 0xca, 0xb6, 0x64, 0x63,
	0xbc, 0x02, 0xb3, 0x7b, 0x4c, 0xbf, 0x16, 0x27, 0xc2, 0x90, 0xff, 0x5c, 0xe4, 0x95, 0xfc, 0x3c,
	0xc7, 0xab, 0x30, 0x97, 0xc5, 0x2a, 0x38, 0xe6, 0x21, 0x99, 0xb5, 0xc5, 0x01, 0x80, 0x29, 0xc0,
	0x01, 0x8b, 0x12, 0xbe, 0x75, 0x6e, 0xb8, 0x26, 0x73, 0x56, 0x73, 0x08, 0xc1, 0x1e, 0x2c, 0x37,
	0x93, 0x20, 0xe0, 0x5a, 0x67, 0xab, 0xb7, 0x58, 0x70, 0x4c, 0xc0, 0x45, 0xde, 0x9c, 0x3f, 0x0e,
	0xe3, 0x87, 0xb0, 0xb8, 0x1b, 0xc7, 0x2a, 0xce, 0x79, 0xf3, 0x96, 0x37, 0x0a, 0x66, 0x7a, 0xfd,
	0x78, 0x3b, 0x52, 0x3a, 0x89, 0x39, 0x59, 0xb0, 0x43, 0xc7, 0xe1, 0x6c, 0xef, 0x86, 0xb6, 0xa6,
	0x1d, 0x6c, 0x92, 0x45, 0x17, 0x79, 0xb3, 0xfe, 0x00, 0xc0, 0x75, 0xc0, 0xaf, 0x98, 0xde, 0xe7,
	0x32, 0x14, 0xb2, 0x9d, 0x8f, 0x5c, 0xb2, 0xb4, 0x09, 0x15, 0xfc, 0x04, 0xc8, 0x18, 0x34, 0x30,
	0x65, 0xd9, 0x9a, 0xf2, 0xcf, 0x7a, 0xf5, 0x17, 0x82, 0x95, 0x89, 0x27, 0xb9, 0x17, 0xab, 0xe4,
	0x34, 0x33, 0x3f, 0x5f, 0x00, 0xd9, 0xff, 0x9c, 0xe7, 0xa3, 0xe6, 0x17, 0xc6, 0xcd, 0xaf, 0xc2,
	0x42, 0x9f, 0x69, 0x8f, 0xb4, 0x68, 0x9d, 0x18, 0xc1, 0xb2, 0x03, 0x6a, 0x84, 0x5c, 0x1a, 0x71,
	0x28, 0x78, 0x4c, 0x4a, 0x56, 0x7f, 0x08, 0xc1, 0xcf, 0x00, 0xf2, 0x7d, 0x34, 0x99, 0x71, 0x8b,
	0xde, 0xfc, 0xc6, 0xda, 0xd4, 0xfb, 0xe7, 0x0f, 0x35, 0xd4, 0xbe, 0x20, 0xb8, 0x37, 0xe5, 0xa6,
	0x63, 0x17, 0x56, 0x27, 0x96, 0x7b, 0x66, 0x55, 0x1c, 0x7c, 0x1f, 0xd6, 0x26, 0x8f, 0xe1, 0x5a,
	0x45, 0x67, 0x3c, 0xac, 0xa0, 0x29, 0x94, 0xf7, 0x3c, 0x30, 0x3c, 0xac, 0x14, 0x6a, 0xdf, 0x11,
	0x54, 0x6f, 0xff, 0x5a, 0xf0, 0x1a, 0xdc, 0x1d, 0x66, 0x35, 0xcf, 0x65, 0x90, 0x13, 0x2a, 0x0e,
	0xae, 0xc1, 0xa3, 0x1b, 0x22, 0x5b, 0x89, 0x88, 0x8c, 0x90, 0x2f, 0x13, 0x19, 0x34, 0xa4, 0x89,
	0x59, 0xf3, 0x88, 0xc5, 0xd9, 0x52, 0xb7, 0x70, 0xb7, 0x63, 0xa5, 0x75, 0x97, 0x5b, 0xc0, 0xab,
	0x40, 0x6e, 0x70, 0xdf, 0xca, 0x63, 0xa9, 0x3e, 0xc8, 0x4a, 0x71, 0xeb, 0xf9, 0xc5, 0x15, 0x75,
	0x2e, 0xaf, 0xa8, 0x73, 0x7d, 0x45, 0xd1, 0xe7, 0x94, 0xa2, 0x6f, 0x29, 0x45, 0x3f, 0x52, 0x8a,
	0x2e, 0x52, 0x8a, 0x2e, 0x53, 0x8a, 0x7e, 0xa7, 0x14, 0xfd, 0x49, 0xa9, 0x73, 0x9d, 0x52, 0xf4,
	0xb5, 0x43, 0x9d, 0x8b, 0x0e, 0x75, 0x2e, 0x3b, 0xd4, 0x79, 0xd7, 0x7b, 0xe5, 0x5a, 0x65, 0xfb,
	0x7a, 0x6d, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x15, 0xd8, 0x65, 0xd8, 0x07, 0x05, 0x00, 0x00,
}

func (x SerializableAsyncCallStatus) String() string {
	s, ok := SerializableAsyncCallStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SerializableAsyncCallExecutionMode) String() string {
	s, ok := SerializableAsyncCallExecutionMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SerializableAsyncCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializableAsyncCall)
	if !ok {
		that2, ok := that.(SerializableAsyncCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.CallID, that1.CallID) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.ExecutionMode != that1.ExecutionMode {
		return false
	}
	if !bytes.Equal(this.Destination, that1.Destination) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.GasLocked != that1.GasLocked {
		return false
	}
	if !bytes.Equal(this.ValueBytes, that1.ValueBytes) {
		return false
	}
	if this.SuccessCallback != that1.SuccessCallback {
		return false
	}
	if this.ErrorCallback != that1.ErrorCallback {
		return false
	}
	if !bytes.Equal(this.CallbackClosure, that1.CallbackClosure) {
		return false
	}
	if this.IsAsyncV3 != that1.IsAsyncV3 {
		return false
	}
	if this.HasPendingCallback != that1.HasPendingCallback {
		return false
	}
	if this.PendingCallbackGasLocked != that1.PendingCallbackGasLocked {
		return false
	}
	return true
}
func (this *SerializableAsyncCallGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializableAsyncCallGroup)
	if !ok {
		that2, ok := that.(SerializableAsyncCallGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Callback != that1.Callback {
		return false
	}
	if this.GasLocked != that1.GasLocked {
		return false
	}
	if !bytes.Equal(this.CallbackData, that1.CallbackData) {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if len(this.AsyncCalls) != len(that1.AsyncCalls) {
		return false
	}
	for i := range this.AsyncCalls {
		if !this.AsyncCalls[i].Equal(that1.AsyncCalls[i]) {
			return false
		}
	}
	return true
}
func (this *SerializableAsyncCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&vmhost.SerializableAsyncCall{")
	s = append(s, "CallID: "+fmt.Sprintf("%#v", this.CallID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "ExecutionMode: "+fmt.Sprintf("%#v", this.ExecutionMode)+",\n")
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "GasLimit: "+fmt.Sprintf("%#v", this.GasLimit)+",\n")
	s = append(s, "GasLocked: "+fmt.Sprintf("%#v", this.GasLocked)+",\n")
	s = append(s, "ValueBytes: "+fmt.Sprintf("%#v", this.ValueBytes)+",\n")
	s = append(s, "SuccessCallback: "+fmt.Sprintf("%#v", this.SuccessCallback)+",\n")
	s = append(s, "ErrorCallback: "+fmt.Sprintf("%#v", this.ErrorCallback)+",\n")
	s = append(s, "CallbackClosure: "+fmt.Sprintf("%#v", this.CallbackClosure)+",\n")
	s = append(s, "IsAsyncV3: "+fmt.Sprintf("%#v", this.IsAsyncV3)+",\n")
	s = append(s, "HasPendingCallback: "+fmt.Sprintf("%#v", this.HasPendingCallback)+",\n")
	s = append(s, "PendingCallbackGasLocked: "+fmt.Sprintf("%#v", this.PendingCallbackGasLocked)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializableAsyncCallGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&vmhost.SerializableAsyncCallGroup{")
	s = append(s, "Callback: "+fmt.Sprintf("%#v", this.Callback)+",\n")
	s = append(s, "GasLocked: "+fmt.Sprintf("%#v", this.GasLocked)+",\n")
	s = append(s, "CallbackData: "+fmt.Sprintf("%#v", this.CallbackData)+",\n")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	if this.AsyncCalls != nil {
		s = append(s, "AsyncCalls: "+fmt.Sprintf("%#v", this.AsyncCalls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAsyncCall(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SerializableAsyncCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableAsyncCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableAsyncCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PendingCallbackGasLocked != 0 {
		i = encodeVarintAsyncCall(dAtA, i, uint64(m.PendingCallbackGasLocked))
		i--
		dAtA[i] = 0x78
	}
	if m.HasPendingCallback {
		i--
		if m.HasPendingCallback {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.IsAsyncV3 {
		i--
		if m.IsAsyncV3 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.CallbackClosure) > 0 {
		i -= len(m.CallbackClosure)
		copy(dAtA[i:], m.CallbackClosure)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.CallbackClosure)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ErrorCallback) > 0 {
		i -= len(m.ErrorCallback)
		copy(dAtA[i:], m.ErrorCallback)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.ErrorCallback)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SuccessCallback) > 0 {
		i -= len(m.SuccessCallback)
		copy(dAtA[i:], m.SuccessCallback)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.SuccessCallback)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ValueBytes) > 0 {
		i -= len(m.ValueBytes)
		copy(dAtA[i:], m.ValueBytes)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.ValueBytes)))
		i--
		dAtA[i] = 0x4a
	}
	if m.GasLocked != 0 {
		i = encodeVarintAsyncCall(dAtA, i, uint64(m.GasLocked))
		i--
		dAtA[i] = 0x40
	}
	if m.GasLimit != 0 {
		i = encodeVarintAsyncCall(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExecutionMode != 0 {
		i = encodeVarintAsyncCall(dAtA, i, uint64(m.ExecutionMode))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintAsyncCall(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CallID) > 0 {
		i -= len(m.CallID)
		copy(dAtA[i:], m.CallID)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.CallID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SerializableAsyncCallGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableAsyncCallGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableAsyncCallGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AsyncCalls) > 0 {
		for iNdEx := len(m.AsyncCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AsyncCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsyncCall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CallbackData) > 0 {
		i -= len(m.CallbackData)
		copy(dAtA[i:], m.CallbackData)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.CallbackData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GasLocked != 0 {
		i = encodeVarintAsyncCall(dAtA, i, uint64(m.GasLocked))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Callback) > 0 {
		i -= len(m.Callback)
		copy(dAtA[i:], m.Callback)
		i = encodeVarintAsyncCall(dAtA, i, uint64(len(m.Callback)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAsyncCall(dAtA []byte, offset int, v uint64) int {
	offset -= sovAsyncCall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SerializableAsyncCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallID)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovAsyncCall(uint64(m.Status))
	}
	if m.ExecutionMode != 0 {
		n += 1 + sovAsyncCall(uint64(m.ExecutionMode))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovAsyncCall(uint64(m.GasLimit))
	}
	if m.GasLocked != 0 {
		n += 1 + sovAsyncCall(uint64(m.GasLocked))
	}
	l = len(m.ValueBytes)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	l = len(m.SuccessCallback)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	l = len(m.ErrorCallback)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	l = len(m.CallbackClosure)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	if m.IsAsyncV3 {
		n += 2
	}
	if m.HasPendingCallback {
		n += 2
	}
	if m.PendingCallbackGasLocked != 0 {
		n += 1 + sovAsyncCall(uint64(m.PendingCallbackGasLocked))
	}
	return n
}

func (m *SerializableAsyncCallGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Callback)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	if m.GasLocked != 0 {
		n += 1 + sovAsyncCall(uint64(m.GasLocked))
	}
	l = len(m.CallbackData)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovAsyncCall(uint64(l))
	}
	if len(m.AsyncCalls) > 0 {
		for _, e := range m.AsyncCalls {
			l = e.Size()
			n += 1 + l + sovAsyncCall(uint64(l))
		}
	}
	return n
}

func sovAsyncCall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAsyncCall(x uint64) (n int) {
	return sovAsyncCall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SerializableAsyncCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializableAsyncCall{`,
		`CallID:` + fmt.Sprintf("%v", this.CallID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`ExecutionMode:` + fmt.Sprintf("%v", this.ExecutionMode) + `,`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`GasLocked:` + fmt.Sprintf("%v", this.GasLocked) + `,`,
		`ValueBytes:` + fmt.Sprintf("%v", this.ValueBytes) + `,`,
		`SuccessCallback:` + fmt.Sprintf("%v", this.SuccessCallback) + `,`,
		`ErrorCallback:` + fmt.Sprintf("%v", this.ErrorCallback) + `,`,
		`CallbackClosure:` + fmt.Sprintf("%v", this.CallbackClosure) + `,`,
		`IsAsyncV3:` + fmt.Sprintf("%v", this.IsAsyncV3) + `,`,
		`HasPendingCallback:` + fmt.Sprintf("%v", this.HasPendingCallback) + `,`,
		`PendingCallbackGasLocked:` + fmt.Sprintf("%v", this.PendingCallbackGasLocked) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializableAsyncCallGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAsyncCalls := "[]*SerializableAsyncCall{"
	for _, f := range this.AsyncCalls {
		repeatedStringForAsyncCalls += strings.Replace(f.String(), "SerializableAsyncCall", "SerializableAsyncCall", 1) + ","
	}
	repeatedStringForAsyncCalls += "}"
	s := strings.Join([]string{`&SerializableAsyncCallGroup{`,
		`Callback:` + fmt.Sprintf("%v", this.Callback) + `,`,
		`GasLocked:` + fmt.Sprintf("%v", this.GasLocked) + `,`,
		`CallbackData:` + fmt.Sprintf("%v", this.CallbackData) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`AsyncCalls:` + repeatedStringForAsyncCalls + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAsyncCall(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SerializableAsyncCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsyncCall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableAsyncCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableAsyncCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallID = append(m.CallID[:0], dAtA[iNdEx:postIndex]...)
			if m.CallID == nil {
				m.CallID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SerializableAsyncCallStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionMode", wireType)
			}
			m.ExecutionMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionMode |= SerializableAsyncCallExecutionMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = append(m.Destination[:0], dAtA[iNdEx:postIndex]...)
			if m.Destination == nil {
				m.Destination = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLocked", wireType)
			}
			m.GasLocked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLocked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueBytes = append(m.ValueBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ValueBytes == nil {
				m.ValueBytes = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessCallback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessCallback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCallback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorCallback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackClosure", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackClosure = append(m.CallbackClosure[:0], dAtA[iNdEx:postIndex]...)
			if m.CallbackClosure == nil {
				m.CallbackClosure = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAsyncV3", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAsyncV3 = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPendingCallback", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPendingCallback = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCallbackGasLocked", wireType)
			}
			m.PendingCallbackGasLocked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingCallbackGasLocked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAsyncCall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializableAsyncCallGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsyncCall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableAsyncCallGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableAsyncCallGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLocked", wireType)
			}
			m.GasLocked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLocked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackData = append(m.CallbackData[:0], dAtA[iNdEx:postIndex]...)
			if m.CallbackData == nil {
				m.CallbackData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsyncCall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsyncCalls = append(m.AsyncCalls, &SerializableAsyncCall{})
			if err := m.AsyncCalls[len(m.AsyncCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsyncCall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsyncCall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAsyncCall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAsyncCall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsyncCall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAsyncCall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAsyncCall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAsyncCall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAsyncCall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAsyncCall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAsyncCall = fmt.Errorf("proto: unexpected end of group")
)
